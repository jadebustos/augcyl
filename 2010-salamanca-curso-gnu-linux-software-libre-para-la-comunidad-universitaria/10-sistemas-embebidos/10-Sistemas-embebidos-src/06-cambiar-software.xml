<?xml version='1.0' encoding='UTF-8' ?>


<chapter>
<title>Cambiar el software del dispositivo</title>

<section><title>El kit de la cuesti&oacute;n</title>
<para>
En los sistemas empotrados el firmware (software) normalmente est&aacute; grabado en una memoria flash. A la hora de tratar de aprovechar las caracter&iacute;sticas de un dispositivo m&aacute;s all&aacute; de lo que permit&iacute;a su firmware original, caben dos posibilidades: seguir usando el sistema original, pero ampliado con nuevas aplicaciones o reemplazar totalmente el firmware que ven&iacute;a en la memoria flash por otro. Lo primero, que tiene como ejemplo el popular optware, puede ser menos peligroso y permite conservar la funcionalidad del firmware original. Es muy &uacute;til cuando el firmware original es bueno y cuenta con una interfaz web c&oacute;moda u ofrece funcionalidades de las que no se dispone el c&oacute;digo fuente por lo que se perder&iacute;an al reemplazar el firmware, por ejemplo la parte de ADSL en muchos routers. Sin embargo esta opci&oacute;n tambi&eacute;n suele ser m&aacute;s limitada al obligar a usar el mismo software que usaron los creadores originales del firmware: esto se traduce en la pr&aacute;ctica en que hay menos programas disponibles que si se remplaza el firmware por otro software m&aacute;s flexible. Es m&aacute;s, en algunos sistemas esto obliga a usar un kernel 2.4 y versiones muy viejas de las librer&iacute;as.
</para>
<para>
A la hora de sobreescribir el firmware con otro sistema Linux, en ocasiones se puede elegir entre varias opciones: desde instalar una versi&oacute;n de Debian para ese procesador, que normalmente es la soluci&oacute;n que m&aacute;s programas (paquetes) ofrece pero tambi&eacute;n la menos optimizada, a usar un sistema como OpenWRT http://www.openwrt.org con versiones m&aacute;s reducidas del software y de la librer&iacute;a libc, pero que tiene la ventaja de necesitar menos memoria RAM y menos espacio en la memoria Flash. Una alternativa a OpenWRT tambi&eacute;n orientada a consumir el m&iacute;nimo de recursos es buildroot, algo m&aacute;s orientado a desarrolladores que quieren construir un sistema totalmente personalizado m&aacute;s que una distribuci&oacute;n: openWRT naci&oacute; como un firmware para un router y cuenta con interfaz web, un sistema de configuraci&oacute;n y paquetes instalables, mientras que en Buildroot no hay nada de eso y aunque utilice el t&eacute;rmino paquetes son m&aacute;s bien m&oacute;dulos pues no es algo que instale el usuario sino partes que se a&ntilde;aden o no al sistema de ficheros.
</para>
<para>
Los sistemas m&aacute;s interesantes son los que permiten conectar un disco USB, ya sea para poder montar un sistema de ficheros /opt donde estar&aacute;n las nuevas aplicaciones o para poder montar el sistema de ficheros directamente de un disco USB en lugar de usar la memoria flash. La memoria flash suele estar muy limitada en capacidad y adem&aacute;s permite muchas menos escrituras antes de empezar a fallar, lo que hace que sea inviable usarlas para hacer swapping y tener memoria virtual (muy &uacute;til porque estos dispositivos suelen venir tambi&eacute;n muy cortos de RAM) e incluso pueden llegar a ser un problema con algunos programas como clientes de bittorrent que escriben mucho en el disco para mantener estad&iacute;sticas actualizadas. Adem&aacute;s cualquier operaci&oacute;n inadecuada en el disco USB se sabe que se no va a impedir que el dispositivo arranque o al menos va a poder arreglarse desde otro ordenador, mientras que una mala modificaci&oacute;n en el firmware instalado en la memoria flash es m&aacute;s delicado. Adem&aacute;s en una memoria flash no se puede escribir directamente ficheros como en un disco, salvo que haya una capa de software (en los pendrives de hardware) que se encarga de traducir de un dispositivo de bloques a las peculiaridades de las memorias flash (por la limitaci&oacute;n en el n&uacute;mero de escrituras, en una memoria flash no se puede indicar que se quiere escribir en el bloque x, sino que hay una lista de bloques libres; para modificar un fragmento de un fichero, el bloque que lo conten&iacute;a se marca como borrado y se encola para su uso futuro, tom&aacute;ndose el primer bloque libre de la lista para escribir el nuevo contenido; de este modo el n&uacute;mero de escrituras se reparte homog&eacute;neamente entre todos los bloques de la memoria flash y no hay bloques que se queman en seguida por alojar contenidos que cambian con frecuencia). Hay sistemas que en la memoria flash aloja simplemente un sistema de ficheros de s&oacute;lo lectura.
</para>
<para>
La inmensa mayor&iacute;a de los dispositivos, aunque permitan usar un disco USB lamentablemente lo que no permiten es arrancar de &eacute;l al estilo de los PCs. Esto es una pena, porque eso permitir&iacute;a arrancar un firmware m&aacute;s potente sin necesidad de tocar el existente, con lo que todo ser&iacute;a m&aacute;s f&aacute;cil, sin posibilidad de romper nada y elegir entre usar el firmware original y el modificado ser&iacute;a tan simple como conectar o no el disco USB. En realidad cualquier dispositivo podr&iacute;a arrancar (de forma limitada) de USB sin necesidad de hardware especial, simplemente utilizando como cargador uboot con una extensi&oacute;n especial para reconocer discos USB y dentro de ellos las particiones Linux y poder ejecutar as&iacute; un kernel presente en el disco. No es una soluci&oacute;n igual de buena que un arranque USB de verdad (por ejemplo no funcionar&iacute;a si se ha corrompido el contenido de la memoria flash y afecta al cargador) pero es mucho mejor que no tener nada.
</para>
<para>
Si no se puede arrancar directamente de USB, hay un par de alternativas que en la pr&aacute;ctica funcionan muy bien, pero que implican modificar el firmware. La idea es o bien cambiar los par&aacute;metros del kernel para que trate de montar como sistema ra&iacute;z uno situado en un dispositivo USB en lugar de en la memoria flash, que es la opci&oacute;n m&aacute;s r&aacute;pida, o bien que el software que se ejecuta al arrancar el Linux presente en la memoria flash lo primero que haga sea montar el disco USB externo y pasar a utilizarlo como sistema de ficheros ra&iacute;z (hacer pivotroot), que aunque sea menos directo permitir&iacute;a decidir si montar el disco USB o ejecutar el software de la memoria flash u otras opciones como montar un sistema de ficheros en red. Por ejemplo puede decidirse entre un arranque u otro en funci&oacute;n de que el usuario pulse un bot&oacute;n, el resultado de una consulta de red o simplemente que est&eacute; o no conectado el disco USB.

</para>
<para>
Ambas alternativas implican modificar el firmware para poder montar el sistema por USB, pero a partir de ese momento ya no har&aacute; falta volver a tocar el contenido de la memoria flash. La &uacute;nica excepci&oacute;n es para modificar el kernel, dado que se lee de la memoria flash y es &eacute;l quien monta el disco USB. En algunos sistemas es posible utilizar una caracter&iacute;stica interesante del kernel de Linux llamada kexec. Consiste en que una vez que ha arrancado el sistema, es posible cargar un kernel en memoria y ejecutarlo reemplazando al actual (equivalente a volver a arrancar, pero ahora con el nuevo kernel y de forma muy r&aacute;pida). Esta opci&oacute;n es muy valiosa, porque permitir&iacute;a modificar tan s&oacute;lo una vez el disco flash para grabar un kernel con kexec y un peque&ntilde;o sistema que se encargue de buscar el kernel que quiere ejecutar el usuario de un disco USB o una localizaci&oacute;n de red y a partir de ah&iacute; ya no har&iacute;a falta tocar m&aacute;s la memoria flash, ni para actualizar el software del sistema de ficheros ni para cambiar el kernel. Esta opci&oacute;n es atractiva sobre todo porque modificar la memoria flash es delicado (es cuando hay riesgo de que luego el sistema no arranque) y en algunos dispositivos implica hacer algo especial, como abrirlos y usar un cable serie. Un vendedor que quiera proporcionar un sistema tan f&aacute;cilmente modificable como uno que permita arrancar de USB, simplemente tendr&iacute;a que comercializarlo con el firmware as&iacute; modificado.
</para>
<para>
Hablando de dispositivos USB, una tentaci&oacute;n es usar un pendrive en lugar de un disco USB: consumen menos, son m&aacute;s silenciosos y si nos vale uno de poca capacidad son baratos. Para muchos casos est&aacute; bien, pero para escrituras intensivas o si hay necesidad de usarlos para swap, ya se han comentado que limitaciones tienen en n&uacute;mero de reescrituras. Curiosamente hay una alternativa a los pendrives, basada en usar unos productos que se han quedado anticuados con el abaratamiento de las memorias flash pero que se pueden obtener baratos en EBay. Se trata de los microdrives, que con el tama&ntilde;o y conectores de una tarjeta compact-flash (como las que suelen llevar las reflex) en lugar de tener en su interior memoria flash tienen un diminuto disco duro. Suena incre&iacute;ble, pero en las wikipedia se pueden ver fotos de c&oacute;mo son por dentro y efectivamente son discos duros. Los microdrives se usaban en su d&iacute;a como alternativa a las caras memorias flash y en su momento lo han usado dispositivos como los primeros iPod. La ventaja para nosotros es que los microdrives al ser discos duros no tienen problema con el n&uacute;mero de reescrituras y se pueden usar tambi&eacute;n para swap. Consumen m&aacute;s que un pendrive normal (por este mayor consumo muchos lectores que admiten tarjetas compact-flash no son capaces de leer microdrives, por lo que lo mejor es comprar directamente un microdrive con USB, que parecen pendrives un poco bastos) pero obviamente menos que un disco duro convencional.
</para>
</section>
<section><title>C&oacute;mo de complicado es cambiar el firmware</title>
<para>
La mayor&iacute;a de los dispositivos dividen el espacio de la memoria flash en tres o cuatro &aacute;reas: el cargador que arranca el k&eacute;rnel, el k&eacute;rnel, el sistema de ficheros con el software y en algunos casos un &aacute;rea de datos para guardar las preferencias del usuario, como configuraci&oacute;n de red y contrase&ntilde;a, para que no se pierdan al actualizar el firmware. Muchos firmwares ofrecen una interfaz web que permite reemplazar el propio firmware por otro: en la mayor&iacute;a de los casos s&oacute;lo tocan el sistema de ficheros y el kernel; ojo con algunos sistemas que no nos sirven para reemplazar el firmware, porque s&oacute;lo sirven para modificar una parte del software, no todo el sistema de ficheros (por ejemplo en una TDTHD con posibilidad de ver MKVs, es t&iacute;pico s&oacute;lo poder modificar el propio programa de la TDT y pel&iacute;culas, no el resto del sistema). As&iacute; pues, dependiendo del sistema, sin necesidad de abrir el dispositivo podremos cambiar tanto kernel como sistema de ficheros, s&oacute;lo sistema de ficheros o directamente no podremos. en algunos casos habr&aacute; una segunda opci&oacute;n, que es conectarnos por SSH y modificar directamente el sistema de ficheros.
</para>
<para>
Cuando no es posible modificar el firmware v&iacute;a web o simplemente si por cualquier raz&oacute;n se han hecho modificaciones inadecuadas en el sistema de ficheros o en el kernel y el sistema no arranca y por lo tanto no es posible recurrir a la opci&oacute;n web, en muchos sistemas es posible la opci&oacute;n de usar un cable serie. Aqu&iacute; lo que se aprovecha es que la mayor&iacute;a de los dispositivos incluyen un cargador avanzado como redboot o uboot, que no s&oacute;lo son para arrancar el kernel sino que adem&aacute;s permiten escribir en la memoria flash y as&iacute; modificar el firmware. El cable serie es para poder interactuar con el cargador e indicarle que queremos escribir en la memoria flash, en algunos adem&aacute;s tambi&eacute;n habr&aacute; que transferir por el cable serie el contenido a grabar, mientras que en otros se podr&aacute; indicar que se descargue de un servidor TFTP, con lo que la transferencia al ser v&iacute;a red ser&aacute; mucho m&aacute;s r&aacute;pida. Hay que rese&ntilde;ar que en los sistemas en los que hace falta un cable serie para indicar al cargador que queremos sobreescribir el firmware, es porque el fabricante no ha querido proporcionar un sistema alternativo. En sistemas como el NSLU2 de Linksys o los tablets y smartphones de Nokia N800, N810 y N900, existe la posibilidad de utilizar determinados botones (puede ser tan simple como pulsar el bot&oacute;n de reset mientras se enciende) para indicar al cargador que se debe poner en modo de reflaseo. En estos dispositivos no hace falta acceso al puerto serie y la imagen a grabar se pasa v&iacute;a USB. Lamentablemente la mayor&iacute;a de los fabricantes son m&aacute;s hostiles a que los usuarios puedan modificar el firmware y adem&aacute;s suelen negar la garant&iacute;a a quienes lo hagan: posiblemente la garant&iacute;a legal siga amparando al usuario mientras quede claro que no es culpa de la modificaci&oacute;n del firmware, pero como se sabe la garant&iacute;a legal s&oacute;lo es eficaz para el usuario los primeros 6 meses, el a&ntilde;o y medio restante la presunci&oacute;n de inocencia cae del lado del fabricante y es el consumidor quien tiene que demostrar.
</para>

<para>
En muchos sistemas existen los tres pines necesarios para tener un conector serie: TX, RX y GND, es decir, el pin para transmitir, para recibir y el com&uacute;n para tierra, pero no est&aacute;n accesibles desde el exterior de la carcasa. En el caso de los fabricantes hostiles a que los usuarios modifiquen el hardware que venden, abrir la caja podr&iacute;a invalidar la garant&iacute;a comercial; con la legal es menos claro, pero aparte de lo recordado de los 6 meses est&aacute; el problema de que ante un fallo de un componente el&eacute;ctrico interno es menos claro demostrar que no se ha tocado nada. Aunque esos tres pines componen un puerto serie, hay que tener en cuenta que no usa los voltajes que establece la norma RS232, sino que opera con voltajes muy inferiores (3.3v): se suele hablar de puerto serie TTL, en menci&oacute;n a que se usa voltaje de comunicaciones entre transistores (estrictamente TTL s&oacute;lo ser&iacute;a adecuado para voltajes de 5V, siendo el t&eacute;rmino correcto para 3.3V LVTTL, pero se ha popularizado utilizar el mismo t&eacute;rmino para los dos). Afortunadamente hay muchos cables en el mercado con un chip adaptador (por ejemplo el cp210x), para conectar a un puerto USB y es m&aacute;s, es posible hacerse con uno muy barato por coincidir con el cable de datos de modelos antiguos de tel&eacute;fonos de marcas como Nokia o Siemens: as&iacute; pues basta con buscar en un sitio como Dealextreme por Nokia CA-42. Adem&aacute;s, en el caso de tiendas online que venden directamente equipos dedicados a personas que quieren meter un Linux en ellos, lo normal es que vendan tambi&eacute;n el cable ya adaptado para que se pueda conectar al dispositivo directamente. Con otros dispositivos es posible que nos toque cortar el cable y hacer alguna peque&ntilde;a soldadura. Todos los dispositivos que vamos a analizar tienen en com&uacute;n que el puerto serie es de este tipo, TTL de 3.3v y por lo tanto servir&iacute;a para todos el mismo cable conversor de TTL serie a USB o RS232, con la peculiaridad que la conexi&oacute;n en el dispositivo variar&aacute;.
</para>
<para>
Para aficionados, las opciones para reflasear un dispositivo se agotan aqu&iacute;: si se sobreescribe el cargador de arranque probablemente hayamos convertido nuestro dispositivo en un pisapapeles (el temido t&eacute;rmino utilizado en los foros en ingl&eacute;s es bricked). Hay algunas excepciones, en kits de desarrollo que vienen con dos memorias flash y un conmutador para arrancar de una u otra: con este sistema siempre es posible arrancar de la que funciona para arreglar la otra.
</para>
<para>
¿Hay alguna soluci&oacute;n ante un dispositivo bricked? Muchos dispositivos tienen tambi&eacute;n pines de la interfaz JTAG, que se usa para depurar y para acceder a los chips del dispositivo directamente. Mediante un adaptador JTAG en la mayor&iacute;a de los casos es posible escribir en la memoria flash y esto se hace directamente, por lo que funcionar&iacute;a aunque estuviera totalmente corrupta la memoria flash y no se ejecutara el cargador. En algunos casos es posible incluso reflasear el firmware con el dispositivo apagado (la picaresca para si el sistema est&aacute; averiado y se quiere retornar con el firmware original). Lo malo es que la opci&oacute;n JTAG no est&aacute; al alcance de la mayor&iacute;a de los usuarios, tanto por complicada como porque necesita hardware especial (el adaptador JTAG). Desafortunadamente ni siquiera est&aacute; estandarizado el conector JTAG, aunque al menos la mayor&iacute;a de dispositivos ARM tienen el mismo y la mayor&iacute;a de los MIPs tambi&eacute;n tienen uno com&uacute;n pero distinto al que suelen llevar los ARM. As&iacute; pues puede ser necesario distintos adaptadores JTAG y distinto software. La mayor&iacute;a de los adaptadores JTAG pueden costar m&aacute;s que el dispositivo a reflasear, por encima de los 100EUR, aunque los haya sensiblemente m&aacute;s baratos (sobre todo por puerto paralelo) que pueden servir seg&uacute;n el sistema y est&aacute;n disponibles por unos 15 EUR.
</para>
<para>
Con todo, hay dispositivos como el TP-LINK 1043WR-N que tienen interfaz JTAG pero no se conoce c&oacute;mo usarla para escribir en la memoria flash. En esos dispositivos o en los que no tienen JTAG, la &uacute;nica opci&oacute;n (muy complicada para la inmensa mayor&iacute;a de los mortales) ser&iacute;a desoldar los fin&iacute;simos pines de la memoria flash, modificarla con un programador externo y volverla a soldar.
</para>
</section>

</chapter>

