<chapter id="tipos-de-datos">
    <title>Tipos de datos en <acronym>YACAS</acronym></title>

    <para><acronym>YACAS</acronym> trata todo como objetos y tiene dos
    tipos básicos de objetos:</para>

    <itemizedlist>
      <listitem>
	<para><keycap>Atoms</keycap> (átomos). Son datos indivisibles
	como por ejemplo números y cadenas de texto.</para>
      </listitem>
      <listitem>
	<para><keycap>Compounds</keycap> (compuestos). Son uniones de
	átomos, es decir datos que se pueden separar en átomos como
	por ejemplo funciones, expresiones y listas.</para>
      </listitem>
    </itemizedlist>

    <sect1 id="tratamiento">
      <title>Tratamiento de los datos en
      <acronym>YACAS</acronym></title>

      <para>Internamente <acronym>YACAS</acronym> almacena los átomos
      como cadenas de texto y los compounds como listas.</para>

      <para>Podemos utilizar la función <keycap>Type</keycap> para ver
      que tipo de objeto estamos tratando:</para>

      <example>
	<title>Uso de <keycap>Type</keycap></title>
	<screen>
<prompt>In> </prompt><userinput>Type("Hola");</userinput>
<computeroutput>Out> "";</computeroutput>
<prompt>In> </prompt><userinput>Type(2+(3*5));</userinput>
<computeroutput>Out> "";</computeroutput>
<prompt>In> </prompt><userinput>Type(a*(b+c));</userinput>
<computeroutput>Out> "*";</computeroutput>
<prompt>In> </prompt><userinput>Sin();</userinput>
<computeroutput>Out> Sin;</computeroutput>
<prompt>In> </prompt><userinput>Type({1,2,3});</userinput>
<computeroutput>Out> "List";</computeroutput>
<prompt>In></prompt>
	</screen>
      </example>

      <para>La interpretación de los ejemplos anteriores es:</para>

      <orderedlist>
	<listitem>
	  <para><keycap>"Hola"</keycap> es una cadena de caracteres,
	    luego un átomo y en estos casos se devuelve la cadena
	    vacía <keycap>""</keycap>.</para>
	</listitem>
	<listitem>
	  <para><keycap>2+(3*5)</keycap> es una expresión y por lo
	  tanto un compound. Sin embargo el valor devuelto es la
	    cadena vacía <keycap>""</keycap>, es un átomo!!.</para>
	  <para>La explicación es sencilla, <acronym>YACAS</acronym>
	    antes de ejecutar la función <keycap>Type</keycap> evalua
	    su argumento luego en realidad lo que ejecuta
	    <acronym>YACAS</acronym> es:</para>
	  <screen>
<prompt>In> </prompt><userinput>Type(30);</userinput>
<computeroutput>Out> "";</computeroutput>
<prompt>In></prompt>
	  </screen>
	  <para>y como <keycap>30</keycap> es un átomo se obtiene
	    <keycap>""</keycap>.</para>
	</listitem>
	<listitem>
	  <para><keycap>a*(b+c)</keycap> es una expresión y por lo
	tanto un compound. <acronym>YACAS</acronym> devuelve
	<keycap>*</keycap>. En los compounds se devuelve el operador
	de más alto nivel.</para>
	  <para>No confundir con el operador que primero
	aparece:</para>
	  <screen>
<prompt>In> </prompt><userinput>Type((a*b)+(c/d));</userinput>
<computeroutput>Out> "+";</computeroutput>
<prompt>In></prompt>
	  </screen>
	</listitem>
	<listitem>
	  <para><keycap>Sin()</keycap> es una función y por lo tanto
	    un compound. <acronym>YACAS</acronym> devuelve el nombre
	    de la función, operador de más alto nivel.</para>
	</listitem>
	<listitem>
	  <para><keycap>{1,2,3}</keycap> es una lista y por lo tanto
	    un compound. <acronym>YACAS</acronym> devuelve
	    <keycap>List</keycap> indicando que se trata de una
	    lista.</para>
	</listitem>
      </orderedlist>

    </sect1>

    <sect1 id="evaluacion">
      <title>Evaluación de expresiones</title>

      <para><acronym>YACAS</acronym> es case-sensitive es decir que
      distingue entre mayúsculas y minúsculas:</para>
      <screen>
<prompt>In> </prompt><userinput>Sin(Pi);</userinput>
<computeroutput>Out> 0;</computeroutput>
<prompt>In> </prompt><userinput>sin(Pi);</userinput>
<computeroutput>Out> sin(Pi);</computeroutput>
<prompt>In></prompt>
      </screen>
      <para><acronym>YACAS</acronym> utiliza la función
      <keycap>Eval</keycap> para evaluar las expresiones. Podemos
      indicar que no se evalue una expresión mediante el uso de la
	función <keycap>Hold</keycap>:</para>
      <example>
	<title>Uso de <keycap>Hold</keycap></title>
	<screen>
<prompt>In> </prompt><userinput>Type(2+(3*5));</userinput>
<computeroutput>Out> "";</computeroutput>
<prompt>In> </prompt><userinput>Type(Hold(2+(3*5)));</userinput>
<computeroutput>Out> "+";</computeroutput>
<prompt>In></prompt>
	</screen>
      </example>

    </sect1>

    <sect1 id="escalares">
      <title>Datos escalares</title>
      <para><acronym>YACAS</acronym> puede manejar números reales y
	complejos y operar con ellos:</para>

	<example>
	  <title>Tipos de datos escalares</title>
	<screen>
<prompt>In> </prompt><userinput>2+3*I;</userinput>
<computeroutput>Out> Complex(2,3);</computeroutput>
<prompt>In> </prompt><userinput>3;</userinput>
<computeroutput>Out> 3;</computeroutput>
<prompt>In></prompt>
        </screen>
	</example>

    </sect1>

    <sect1 id="constantes">
      <title>Constantes</title>

      <para>Existen en <acronym>YACAS</acronym> algunas constantes que
      ya estan definidas previamente:</para>

      <itemizedlist>
	<listitem>
	  <para><keycap>True</keycap>, esta constante representa el
	  valor lógico de cierto.</para>
	  <screen>
<prompt>In> </prompt><userinput>2*3!=5;</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</listitem>
	<listitem>
	  <para><keycap>False</keycap>, esta constante representa el
	  valor lógico de falso.</para>
	  <screen>
<prompt>In> </prompt><userinput>2=3;</userinput>
<computeroutput>Out> False;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</listitem>
	<listitem>
	  <para><keycap>Infinity</keycap>, esta constante representa
	  el infinito matemático. La mayoría de las funciones
	  analíticas pueden manejarlo como un número
	  cualquiera.</para>
	  <screen>
<prompt>In> </prompt><userinput>Limit(x,0) 1/x;</userinput>
<computeroutput>Out> Infinity;</computeroutput>
<prompt>In> </prompt><userinput>Limit(x,0) -1/x;</userinput>
<computeroutput>Out> -Infinity;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</listitem>
	<listitem>
	  <para><keycap>I</keycap> es la unidad imaginaria, la raíz
	  cuadrada de -1. Siempre en mayúscula.</para>
	  <screen>
<prompt>In> </prompt><userinput>I^2;</userinput>
<computeroutput>Out> -1;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</listitem>
	<listitem>
	  <para><keycap>Pi</keycap>, representa al número
	  <keycap>PI</keycap>.</para>
	  <screen>
<prompt>In> </prompt><userinput>N(Pi);</userinput>
<computeroutput>Out> 3.1415926536;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</listitem>
	<listitem>
	  <para><keycap>Undefined</keycap>, representa un resultado no
	  definido:</para>
	  <screen>
<prompt>In> </prompt><userinput>0*Infinity;</userinput>
<computeroutput>Out> Undefined;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="cadenas">
	<title>Cadenas de caracteres (Strings)</title>

	<para><acronym>YACAS</acronym> puede manejar cadenas de
	texto. Una cadena de texto es un secuencia de caracteres
	entrecomillados:</para>

	<example>
	  <title>Definiendo una cadena de caracteres</title>
	<screen>
<prompt>In> </prompt><userinput>"Esto es una cadena de caracteres";</userinput>
<computeroutput>Out> "Esto es una cadena de caracteres";</computeroutput>
<prompt>In></prompt>
        </screen>
	</example>

    </sect1>

    <sect1 id="listas">
	<title>Listas (Lists)</title>

	<para><acronym>YACAS</acronym> también puede manejar
	listas:</para>

	<para>Una lista no es más que un grupo ordenado de
	datos.</para>
	<para>Para declarar una lista se colocan los elementos de la
	lista entre llaves y separados por comas:</para>

        <example>
	  <title>Definiendo una lista</title>
	<screen>
<prompt>In> </prompt><userinput>{a,b,c,d,e,f};</userinput>
<computeroutput>Out> {a,b,c,d,e,f};</computeroutput>
<prompt>In></prompt>
        </screen>
	</example>

    </sect1>

    <sect1 id="vectores">
	<title>Vectores</title>

	<para>Un vector no es más que una lista:</para>

        <example>
	  <title>Vectores</title>
	<screen>
<prompt>In> </prompt><userinput>{1,3,6};</userinput>
<computeroutput>Out> {1,3,6};</computeroutput>
<prompt>In></prompt>
        </screen>
	</example>

    </sect1>

    <sect1 id="matrices">
	<title>Matrices</title>

	<para>Las matrices son listas de listas, es decir una matriz
	es una lista en la cual cada elemento es otra lista:</para>

        <example>
	  <title>Matrices</title>
	<screen>
<prompt>In> </prompt><userinput>{{1,4,6},{2,-8,0},{5,7,-2}};</userinput>
<computeroutput>Out> {{1,4,6},{2,-8,0},{5,7,-2}};</computeroutput>
<prompt>In></prompt>
        </screen>
	</example>

    </sect1>

    <sect1 id="pilas">
      <title>Pilas</title>

      <para><acronym>YACAS</acronym> puede trabajar con
      pilas. Internamente interpreta las pilas como listas y tiene una
	serie de funciones para manejar pilas (<xref
      linkend="operaciones-pilas">).</para>
    </sect1>

    <sect1 id="funciones">
      <title>Funciones</title>

      <para>Podemos definir funciones de la siguiente forma:</para>

      <example>
	<title>Definición de funciones</title>
	<screen>
<prompt>In> </prompt><userinput>f(x):=x^2-2*x+1;</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In> </prompt><userinput>f(0);</userinput>
<computeroutput>Out> 1;</computeroutput>
<prompt>In></prompt>
	</screen>
      </example>
      <para>También es posible definir funciones más complejas:</para>
      <screen>
<prompt>In> </prompt><userinput> f(x):=[a:=x; a:=a+2;]</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In> </prompt><userinput>f(0);</userinput>
<computeroutput>Out> 2;</computeroutput>
<prompt>In></prompt>
      </screen>
    </sect1>

    <sect1 id="polinomios">
      <title>Polinomios</title>

      <para><acronym>YACAS</acronym> entenderá como polinomio
      cualquier expresión que dependa de una o más variables "libres",
      es decir que no tengan valores numéricos asociados.</para>
      <para>Esto es abusar un poco del lenguaje, ya que no tenemos un
      tipo de dato especial para los polinomios. Por eso utilizaremos
      expresiones genéricas para tratar polinomios.</para>
    </sect1>

</chapter>

<!-- Local Variables: -->
<!-- sgml-parent-document: "Yacas.sgml" -->
<!-- End: -->