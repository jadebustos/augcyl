<chapter id="personalizacion">
    <title>Personalización de <acronym>YACAS</acronym></title>

    <para><acronym>YACAS</acronym> nos permite personalizar una serie de parámetros para
    una mayor comodidad.</para>

    <sect1 id="yacasrc">
      <title>El fichero <filename>.yacasrc</filename></title>

      <para>Cuando arranca <acronym>YACAS</acronym> busca el fichero
      <filename>.yacasrc</filename> en el directorio personal del usuario, si lo
      encuentra lo ejecuta y en caso de no encontrarlo continua con la
      ejecución.</para>

      <para>Este fichero se escribe según la sintaxis de <acronym>YACAS</acronym> como
      era de suponer, y se pueden configurar varios
      parámetros:</para>

      <itemizedlist>
	<listitem>
	  <para><link linkend="defaultdirectory">DefaultDirectory</link></para>
	</listitem>
	<listitem>
	  <para><link linkend="help">Help</link> </para>
	</listitem>
	<listitem>
	  <para><link linkend="historysize">HistorySize</link></para>
	</listitem>
	<listitem>
	  <para><link linkend="prettyprinter">PrettyPrinter</link></para>
	</listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="ficheros-def">
      <title>Los ficheros <filename>.def</filename></title>

      <para>Cuando <acronym>YACAS</acronym> arranca ejecuta el script
	<filename>yacasinit.ys</filename> que está en el directorio de
	scripts, normalmente en <filename
	class="directory">/usr/share/yacas/</filename>.</para>

      <para><acronym>YACAS</acronym> no carga en memoria todas las
      funciones de biblioteca que posee, ya que se podría saturar
      mucho la memoria del sistema.</para>

      <para>Mediante los ficheros <filename>.def</filename> podemos
	decirle a <acronym>YACAS</acronym> en qué ficheros se
	encuentran el resto de las funciones.</para>

      <para>Supongamos que creamos nuestras propias funciones para el
	tratamiento de estadística y las almacenamos en el fichero
	<filename>estadistica.ys</filename>. Este fichero lo
	almacenamos en nuestro directorio de scripts, el cual tiene
	que conocer <acronym>YACAS</acronym>, <link
	  linkend="defaultdirectory">DefaulDirectory</link>. Entonces
	para hacerle saber a <acronym>YACAS</acronym> en qué fichero
	están las funciones estadísticas que hemos creado escribiremos
	un fichero llamado <filename>estadistica.ys.def</filename> en
	el cual estarán los nombres de las funciones estadísticas que
	hemos creado, una en cada línea, y terminará con el carácter
	}:</para>

<programlisting>
Media
Varianza
Covarianza
...
}
</programlisting>
      <para>Además también tendremos que añadir una línea como la
	siguiente a nuestro fichero
	<filename>.yacasrc</filename>:</para>
<programlisting>
CntDefLoad("yacascripts/estadistica.ys");
</programlisting>


    </sect1>

    <sect1 id="yacas-history">
      <title>El fichero <filename>.yacas_history</filename></title>

      <para>Todas las ordenes que le demos a <acronym>YACAS</acronym> en modo interactivo
	serán almacenadas en el fichero
	<filename>.yacas_history</filename> en el directorio personal del
	usuario.</para>

      <para>Esto nos permite el utilizar las teclas de los cursores
      (arriba y abajo) para recuperar y modificar ordenes previamente
      ejecutadas no siendo necesario reescribirlas de nuevo.</para>

      <para>El tamaño de este archivo es por defecto de 50, es decir
      que <acronym>YACAS</acronym> unicamente almacenará las 50
      últimas ordenes. Podemos cambiar esto mediante la directiva
      <keycap>HistorySize</keycap> (<xref linkend="historysize">).</para>
    </sect1>

    <sect1 id="defaultdirectory">
      <title>La directiva DefaultDirectory</title>
      <para>Cuando <acronym>YACAS</acronym> empieza su ejecución carga una serie de
	scripts de un directorio especial, en GNU/Linux normalmente es
	<filename class="directory">/usr/share/yacas/</filename>.</para>

      <para>Podemos crear nuestros propios scripts definiendo nuestras
      funciones, constantes, ... y podemos especificar los directorios
      desde los que serán cargados nada mas solicitarlo el
      usuario. Para ello debemos especificar esos directorios con la
      directiva <keycap>DefaultDirectory</keycap> en el fichero
      <filename>.yacasrc</filename> que residirá en nuestro directorio
      personal o bien directamente en <acronym>YACAS</acronym>:</para>

      <example>
	<title>Añadiendo nuevos directorios al PATH</title>
	<screen>
<prompt>In> </prompt><userinput>DefaultDirectory("/home/jose/yacasscripts/");</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In></prompt>
        </screen>
      </example>

      <example>
	<title>Cargando nuestros propios scripts</title>
	<screen>
<prompt>In> </prompt><userinput>Load("miscript.ys");</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In></prompt>
        </screen>
      </example>

      <para><acronym>YACAS</acronym> buscaría <filename>miscript.ys</filename> en los
      directorios en los que estan los scripts de inicio y en los que
	le hayamos dicho mediante la directiva
      <keycap>DefaultDirectory</keycap>. Es muy importante el que
      todos los directorios que especifiquemos con esta directiva
	acaben con el carácter "<keycap>/</keycap>" en sistemas UNIX,
      ya que <acronym>YACAS</acronym> antepondrá los directorios especificados al nombre
      del script para cargarlo. En sistemas Windows (R) habrá que
	utilizar el carácter "<keycap>\</keycap>".</para>

    </sect1>

    <sect1 id="help">
      <title>La directiva Help</title>
      <para>Podemos solicitar ayuda en <acronym>YACAS</acronym> de dos formas
      diferentes:</para>

      <orderedlist>
	<listitem>
	  <para>Podemos solicitar ayuda sobre un comando en
	  particular:</para>
	<screen>
<prompt>In> </prompt><userinput>?Solve</userinput>
        </screen>
	</listitem>
	<listitem>
	  <para>Podemos solicitar la ayuda general:</para>
	<screen>
<prompt>In> </prompt><userinput>??</userinput>
        </screen>
	</listitem>
      </orderedlist>

      <para>Al solicitar la ayuda <acronym>YACAS</acronym> la mostrará y dependerá la
      forma en la que lo estemos utilizando para mostrarla:</para>

      <itemizedlist>
	<listitem>
	  <para>Si estamos utilizando la interface gráfica
	  <application>proteusworksheet</application> la ayuda se mostrará en la
	  pestaña Help y se podrá navegar por ella.</para>
	</listitem>
	<listitem>
	  <para>Si estamos utilizando <acronym>YACAS</acronym> en modo consola la ayuda
	    se mostrará utilizando <application>lynx</application> que es un
	    navegador web que funciona en modo texto sin mostrar
	    gráficos y podremos navegar por ella.</para>
	</listitem>
      </itemizedlist>

      <para>La ayuda por defecto se instalará en el directorio
      <filename class="directory">documentation</filename> dentro del directorio en el que
      se instalan los scripts que utiliza <acronym>YACAS</acronym>, es decir que la ayuda
	normalmente estará en
      <filename class="directory">/usr/share/yacas/documentation/</filename>.</para>

      <para>Por defecto se utiliza <application>lynx</application> como
      navegador para visualizar la ayuda, pero es posible configurar
      <acronym>YACAS</acronym> para utilizar otro navegador para mostrar la ayuda:</para>

      <example>
	<title>Cambiando la visualización de la ayuda</title>
      <screen>
<prompt>In> </prompt><userinput>Help(_f) <-- SystemCall("galeon " :FindFile("documentation/ref.html"):"#":f);</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In> </prompt><userinput>Help() := SystemCall("mozilla ":FindFile("documentation/books.html"));</userinput>
<computeroutput>Out> True;</computeroutput>
<computeroutput>In></computeroutput>
      </screen>
      </example>

      <para>Con esto estamos especificando que vamos a utilizar el
	navegador <application>galeon</application> para visualizar la ayuda de
	comandos, <userinput>?Comando</userinput>, mientras que para
	visualizar la ayuda en general utilizaremos
	<application>mozilla</application>, <userinput>??</userinput>.</para>

    </sect1>

    <sect1 id="historysize">
      <title>La directiva HistorySize</title>
      <para>Esta directiva sirve para especificar la cantidad de
	ordenes que <acronym>YACAS</acronym> almacenará en el fichero
	<filename>.yacas_history</filename> (<xref
      linkend="yacas-history">).</para>

      <example>
	<title>Cambiando el tamaño del historial de comandos</title>
	<screen>
<prompt>In> </prompt><userinput>HistorySize(100);</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In></prompt>
        </screen>
      </example>

      <para>De esta forma hemos cambiado el tamaño del historial de
      comandos a las últimas 100 ordenes recibidas por <acronym>YACAS</acronym>, es decir
      almacenará las 100 últimas ordenes y de esta forma podremos
      reutilizarlas y/o modificarlas.</para>

    </sect1>

    <sect1 id="prettyprinter">
      <title>La directiva PrettyPrinter</title>
      <para>Esta directiva nos permite definir como se van a mostrar
      por defecto los resultados de nuestras operaciones.</para>

      <para>La mejor forma de verlo es con un ejemplo:</para>

      <example>
	<title>Cambiando la presentación de resultados</title>
	<screen>
<prompt>In> </prompt><userinput>Taylor(x,0,3)Sin(x);</userinput>
<computeroutput>Out> x-x^3/6;</computeroutput>
<prompt>In> </prompt><userinput>PrettyPrinter("PrettyForm");</userinput>
<computeroutput></computeroutput>
<computeroutput>True;</computeroutput>
<computeroutput></computeroutput>
<prompt>In> </prompt><userinput>Taylor(x,0,3)Sin(x);</userinput>
<computeroutput></computeroutput>
<computeroutput>     3</computeroutput>
<computeroutput>    x</computeroutput>
<computeroutput>x - --</computeroutput>
<computeroutput>    6</computeroutput>
<computeroutput></computeroutput>
<prompt>In></prompt>
        </screen>
      </example>

      <para>En este ejemplo hemos cambiado la presentación normal de
	resultados por la presentación que ofrece el comando
	<userinput>PrettyForm</userinput>.</para>

    </sect1>

    <sect1 id="personalizando">
      <title>Personalizando <acronym>YACAS</acronym></title>

      <para>Ya hemos visto como modificar el comportamiento de
      <acronym>YACAS</acronym>. Los cambios hechos como hemos visto hasta ahora se
      pierden al salir de <acronym>YACAS</acronym> y sería muy molesto el tener que andar
      tecleando todas las ordenes de personalización cada vez que
      entremos en <acronym>YACAS</acronym>.</para>

      <para>Por ese motivo podemo utilizar el fichero <ulink
	  url="yacasrc"><filename>.yacasrc</filename></ulink> para
	  personalizar el entorno y de esta manera cada vez que
	  entremos en <acronym>YACAS</acronym> tendrán efecto las
	  ordenes dadas en dicho fichero.</para>

      <example>
	<title>Ejemplo del fichero <filename>.yacasrc</filename></title>
<programlisting>
/* AÑADIMOS MI DIRECTORIO PERSONAL DE SCRIPTS AL PATH */
DefaultDirectory("/home/jose/yacascripts/");
/* CARGAMOS VARIOS SCRIPTS CON FUNCIONES PROPIAS */
Load("complejo.ys");
Load("combinatoria.ys");
// MODIFICAMOS EL TAMAÑO DEL HISTORIAL DE COMANDOS
HistorySize(100);
</programlisting>
      </example>

    </sect1>

    <sect1 id="precision">
      <title>Estableciendo la precisión de los cálculos</title>

      <para>Podemos establecer la precisión con la que se mostrarán
      los cálculos:</para>
      <screen>
<prompt>In> </prompt><userinput>GetPrecision();</userinput>
<computeroutput>Out> 10;</computeroutput>
<prompt>In> </prompt><userinput>N(Sqrt(2));</userinput>
<computeroutput>Out> 1.4142135623;</computeroutput>
<prompt>In> </prompt><userinput>Precision(20);</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In> </prompt><userinput>N(Sqrt(2));</userinput>
<computeroutput>Out> 1.4142135623730950488;</computeroutput>
<prompt>In></prompt>
      </screen>
      <para>Podemos utilizar <keycap>Precision</keycap> en el fichero
	<filename>.yacasrc</filename> para establecer la precisión por
	defecto con la que se mostrarán nuestros cálculos.</para>

      <note>
	<para>La precisión con la que se muestran los datos no
	afectará a la precisión con la que se realizan las operaciones.</para>
      </note>
    </sect1>

    <sect1 id="ejercicios-personalizacion">
      <title>Ejercicios</title>

      <orderedlist>
	<listitem>
	  <para>Escribir un fichero <filename>.yacasrc</filename> para
	  que al arrancar:</para>
	  <itemizedlist>
	    <listitem>
	      <para>La precisión con la que se muestren los cálculos sea 15.</para>
	    </listitem>
	    <listitem>
	      <para><acronym>YACAS</acronym> busque scripts en el
		directorio <filename
		class="directory">/home/curso/scripts</filename>.</para>
	    </listitem>
	    <listitem>
	      <para><acronym>YACAS</acronym> almacene en el historial
	      de comandos 200 instrucciones.</para>
	    </listitem>
	    <listitem>
	      <para><acronym>YACAS</acronym> utilice siempre
	      <keycap>PrettyForm</keycap> para mostrar los resultados.</para>
	    </listitem>
	    <listitem>
	      <para>Utiliza comentarios.</para>
	    </listitem>
	  </itemizedlist>
	</listitem>
      </orderedlist>
    </sect1>

</chapter>

<!-- Local Variables: -->
<!-- sgml-parent-document: "Yacas.sgml" -->
<!-- End: -->