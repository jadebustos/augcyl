<chapter id="operaciones">

    <title>Operaciones sobre los tipos de datos</title>

    <para><acronym>YACAS</acronym> dispone de una serie de operadores
    para actuar sobre cada tipo de dato. Pero se pueden realizar
    operaciones específicas sobre los datos mediante el uso de
    funciones. Algunas de ellas ya estan implementadas, mientras que
    nosotros podemos implementar las nuestras propias.</para>

    <sect1 id="n">
      <title>La función <keycap>N</keycap></title>

      <para>La función <keycap>N</keycap> nos da una aproximación
      numérica para ciertas expresiones:</para>
      <screen>
<prompt>In> </prompt><userinput>Sin(Pi/3);</userinput>
<computeroutput>Out> Sqrt(3/4);</computeroutput>
<prompt>In> </prompt><userinput>N(Sin(Pi/3));</userinput>
<computeroutput>Out> 0.8660254037;</computeroutput>
<prompt>In></prompt>
      </screen>
      <para>También es posible indicar la precisión con la que queremos
      que se muestre la aproximación:</para>
      <screen>
<prompt>In> </prompt><userinput>N(Sin(Pi/3),20);</userinput>
<computeroutput>Out> 0.86602540378443864676;</computeroutput>
<prompt>In></prompt>
      </screen>
	
    </sect1>

    <sect1 id="re-evaluacion">
      <title>El operador %</title>

      <para>Este operador evalua la última orden recibida por
      <acronym>YACAS</acronym>:</para>
      <screen>
<prompt>In> </prompt><userinput>ArcSin(1);</userinput>
<computeroutput>Out> Pi/2;</computeroutput>
<prompt>In> </prompt><userinput>%;</userinput>
<computeroutput>Out> Pi/2;</computeroutput>
<prompt>In></prompt>
      </screen>
    </sect1>

    <sect1 id="operaciones-variables">
      <title>Operaciones sobre variables</title>

      <para>Cuando queramos reutilizar una dato necesitaremos
      guardarlo en una variable:</para>
      <screen>
<prompt>In> </prompt><userinput>a:=3.141516;</userinput>
<computeroutput>Out> 3.141516;</computeroutput>
<prompt>In> </prompt><userinput>a;</userinput>
<computeroutput>Out> 3.141516;</computeroutput>
<prompt>In></prompt>
      </screen>
      <para>También podemos declarar variables con la función
      <keycap>Set</keycap>:</para>
      <example>
	<title>Uso de <keycap>Set</keycap></title>
	<screen>
<prompt>In> </prompt><userinput>Set(a,3*2);</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In> </prompt><userinput>a;</userinput>
<computeroutput>Out> 6;</computeroutput>
<prompt>In></prompt>
	</screen>
      </example>
      <para>Las variables por defecto son declaradas de tipo global,
      es decir que serán visibles desde cualquier lugar. Ya veremos
      como declarar variables de tipo local.</para>
      <para>En el caso anterior significará que cuando hagamos
      referencia a la variables "<keycap>a</keycap>" se sustituirá por su
      valor:</para>
      <screen>
<prompt>In> </prompt><userinput>a:=3.141516;</userinput>
<computeroutput>Out> 3.141516;</computeroutput>
<prompt>In> </prompt><userinput>a;</userinput>
<computeroutput>Out> 3.141516;</computeroutput>
<prompt>In> </prompt><userinput>Vector:={a,b,c};</userinput>
<computeroutput>Out> {3.141516,b,c};</computeroutput>
<prompt>In></prompt>
      </screen>
      <para>Por lo tanto necesitaremos borrar el contenido de la
	variable "<keycap>a</keycap>" antes de utilizarla. Eso lo
	haremos con la función <keycap>Clear</keycap>:</para>
      <example>
	<title>Uso de <keycap>Clear</keycap></title>
	<screen>
<prompt>In> </prompt><userinput>a:=2;</userinput>
<computeroutput>Out> 2;</computeroutput>
<prompt>In> </prompt><userinput>b:=3;</userinput>
<computeroutput>Out> 3;</computeroutput>
<prompt>In> </prompt><userinput>Clear(a,b);</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In> </prompt><userinput>a;</userinput>
<computeroutput>Out> a;</computeroutput>
<prompt>In> </prompt><userinput>b;</userinput>
<computeroutput>Out> b;</computeroutput>
<prompt>In></prompt>
	</screen>
      </example>

      <para>Disponemos de los operadores <keycap>++</keycap> y
      <keycap>--</keycap>. Estos operadores provienen del lenguaje
      C:</para>

      <itemizedlist>
	<listitem>
	  <para>El operador <keycap>++</keycap> recibe el nombre de
	  operador de autoincremento y sirve para incrementar en una
	  unidad una variable:</para>
	  <screen>
<prompt>In> </prompt><userinput>a:=2;</userinput>
<computeroutput>Out> 2;</computeroutput>
<prompt>In> </prompt><userinput>a++;</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In> </prompt><userinput>a;</userinput>
<computeroutput>Out> 3;</computeroutput>
<prompt>In></prompt>
	  </screen>
	  <para>Este operador es equivalente a:</para>
	  <screen>
<prompt>In> </prompt><userinput>a:=2;</userinput>
<computeroutput>Out> 2;</computeroutput>
<prompt>In> </prompt><userinput>a:=a+1;</userinput>
<computeroutput>Out> 3;</computeroutput>
<prompt>In></prompt>
	  </screen>
	  <para>Pero existe una diferencia fundamental y es que el
	    operador autoincremento devuelve <keycap>True</keycap> en
	    lugar de devolver el resultado.</para>
	  <warning>
	    <para>El operador autoincremento siempre va después de la
	    variable, no se puede colocar antes como en C.</para>
	  </warning>
	</listitem>
	<listitem>
	  <para>El operador <keycap>--</keycap> recibe el nombre de
	  operador de autodecremento y sirve para incrementar en una
	  unidad una variable:</para>
	  <screen>
<prompt>In> </prompt><userinput>a:=2;</userinput>
<computeroutput>Out> 2;</computeroutput>
<prompt>In> </prompt><userinput>a--;</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In> </prompt><userinput>a;</userinput>
<computeroutput>Out> 1;</computeroutput>
<prompt>In></prompt>
	  </screen>
	  <para>Este operador es equivalente a:</para>
	  <screen>
<prompt>In> </prompt><userinput>a:=2;</userinput>
<computeroutput>Out> 2;</computeroutput>
<prompt>In> </prompt><userinput>a:=a-1;</userinput>
<computeroutput>Out> 1;</computeroutput>
<prompt>In></prompt>
	  </screen>
	  <para>Pero existe una diferencia fundamental y es que el
	    operador autodecremento devuelve <keycap>True</keycap> en
	    lugar de devolver el resultado.</para>
	  <warning>
	    <para>El operador autodecremento siempre va después de la
	    variable, no se puede colocar antes como en C.</para>
	  </warning>
	</listitem>
      </itemizedlist>

      <para>Por defecto todas las variables se declaran globales, es
	decir que pueden ser accedidaas desde cualquier parte de
	<acronym>YACAS</acronym>. Para evitar esto podemos declarar
	variables de forma local con <keycap>Local</keycap>:</para>
      <screen>
<prompt>In> </prompt><userinput>Local(a,b,c);</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In></prompt>
      </screen>
      <para>Esto será útil cuando creemos nuestras propias funciones y
      evitar de esta manera que una función modifique variables de
      otra función.</para>

    </sect1>

    <sect1 id="operaciones-escalares">
      <title>Operaciones sobre escalares</title>

      <para>Veremos algunas de las operaciones que podemos realizar
      sobre los escalares.</para>

      <sect2 id="operaciones-usuales-escalares">
	<title>Operaciones usuales sobre escalares</title>

	<para><acronym>YACAS</acronym> posee los siguientes operadores
	para las operaciones usuales sobre escalares:</para>

	<itemizedlist>
	  <listitem>
	    <para><keycap>+</keycap> realiza la suma de escalares.</para>
	  </listitem>
	  <listitem>
	    <para><keycap>-</keycap> realiza la suma de escalares.</para>
	  </listitem>
	  <listitem>
	    <para><keycap>*</keycap> realiza el producto de escalares.</para>
	  </listitem>
	  <listitem>
	    <para><keycap>/</keycap> realiza la división de
	    escalares. Por defecto no nos da el resultado de la
	    operación, para ello tendremos que pedirselo mediante el
	      uso de <keycap>N</keycap>:</para>
	    <screen>
<prompt>In> </prompt><userinput>2/3;</userinput>
<computeroutput>Out> 2/3;</computeroutput>
<prompt>In> </prompt><userinput>N(%);</userinput>
<computeroutput>Out> 0.6666666666;</computeroutput>
<prompt>In> </prompt>
	    </screen>
	  </listitem>
	  <listitem>
	    <para><keycap>^</keycap> realiza la exponenciación.</para>
	  </listitem>
	</itemizedlist>
      </sect2>

      <sect2 id="mod-div">
	<title>División entera</title>

	<para>También disponemos de operadores para realizar la
	división entera, es decir obtener el cociente y el resto de
	una división.</para>

	<para><keycap>Mod</keycap> sirve para calcular el resto de una
	división entera:</para>

	<example>
	  <title>Uso de <keycap>Mod</keycap></title>
	<screen>
<prompt>In> </prompt><userinput>Mod(5,4);</userinput>
<computeroutput>Out> 1;</computeroutput>
<prompt>In> </prompt>
	</screen>
	</example>
	<para><keycap>Div</keycap> sirve para calcular el cociente de
	una división entera:</para>
	<example>
	  <title>Uso de <keycap>Div</keycap></title>
	<screen>
<prompt>In> </prompt><userinput>Div(15,4);</userinput>
<computeroutput>Out> 3;</computeroutput>
<prompt>In> </prompt>
	</screen>
	</example>
      </sect2>

      <sect2 id="bitwise">
	<title>Operadores de desplazamiento de bits</title>

	<para>Todos aquellos que programan regularmente en leguajes
	  derivados del <keycap>C</keycap> conocen los operadores de
	  desplazamiento de bits <keycap><<</keycap> y
	  <keycap>>></keycap>.</para>

	<para>Estos operadores se utilizar para desplazar bits hacía
	  la izquierda, <keycap><<</keycap>, o hacía la derecha,
	  <keycap>>></keycap>.</para>

	<para>El uso de estos operadores es importante a la hora de
	realizar cálculos ya que nos permiten optimizar algunas
	operaciones.</para>

	<para>Los datos en un ordenador se almacenan en base 2, y el
	desplazar los bits n posiciones hacía la izquierda equivale a
	multiplicar por 2^n:</para>
	<example>
	  <title>Uso del operador <keycap><<</keycap></title>
	<screen>
<prompt>In> </prompt><userinput>12<<5;</userinput>
<computeroutput>Out> 384;</computeroutput>
<prompt>In> </prompt><userinput>12*(2^5);</userinput>
<computeroutput>Out> 384;</computeroutput>
<prompt>In></prompt>
	</screen>
	</example>
	<para>De igual forma el desplazar n bits hacía la derecha
	equivale a dividir, de forma entera, por 2^n:</para>
	<example>
	  <title>Uso del operador <keycap>>></keycap></title>
	<screen>
<prompt>In> </prompt><userinput>2346 >> 6;</userinput>
<computeroutput>Out> 36;</computeroutput>
<prompt>In> </prompt><userinput>Div(2346,2^6);</userinput>
<computeroutput>Out> 36;</computeroutput>
<prompt>In></prompt>
	</screen>
	</example> 

      </sect2>

      <sect2 id="mcd">
	<title>Cálculo del Máximo Común Divisor</title>

	<para>Para el cálculo del Máximo Común Divisor
	  <acronym>YACAS</acronym> dispone de la función
	  <keycap>Gcd</keycap> y la podemos utilizar de dos formas
	  diferentes:</para>

	<para>La primera de ellas es para calcular el Máximo Común
	Divisor de dos números enteros:</para>
	<example>
	  <title>Uso de <keycap>Gcd</keycap> para el cálculo del mcd de
	  dos números</title>
	<screen>
<prompt>In> </prompt><userinput>Gcd(55,1350);</userinput>
<computeroutput>Out> 5;</computeroutput>
<prompt>In> </prompt>
	</screen>
	</example>
	<para>También la podemos utilizar para calcular el Máximo
	Común Divisor de una lista de números enteros:</para>
	<example>
	  <title>Uso de <keycap>Gcd</keycap> para el cálculo del mcd
	  de una lista de números</title>
	<screen>
<prompt>In> </prompt><userinput>Gcd({2,5,6,8,9,12,45,67,89});</userinput>
<computeroutput>Out> 1;</computeroutput>
<prompt>In> </prompt>
	</screen>
	</example>
      </sect2>

      <sect2 id="mcm">
	<title>Cálculo del Mínimo Común Multiplo</title>

	<para>Para el cálculo del Mínimo Común Múltiplo
	  <acronym>YACAS</acronym> dispone del la función
	  <keycap>Lcm</keycap>:</para>
	<example>
	  <title>Uso de <keycap>Lcm</keycap> para el cálculo del mcm</title>
	<screen>
<prompt>In> </prompt><userinput>Lcm(6,4);</userinput>
<computeroutput>Out> 12;</computeroutput>
<prompt>In> </prompt>
	</screen>
	</example>
      </sect2>

      <sect2 id="bases">
	<title>Trabajando en bases distintas de la decimal</title>

	<para>Podemos trabajar en bases distintas de la decimal y para
	ello tenemos las siguientes funciones:</para>

	<itemizedlist>
	  <listitem>
	    <para><keycap>FromBase</keycap>, que convierte un número
	    en una base dada a base decimal:</para>
	<example>
	  <title>Uso de <keycap>FromBase</keycap></title>
	<screen>
<prompt>In> </prompt><userinput>FromBase(16,FF089);</userinput>
<computeroutput>Out> 1044617;</computeroutput>
<prompt>In> </prompt>
	</screen>
	</example>
	  </listitem>
	  <listitem>
	    <para><keycap>ToBase</keycap>, que convierte un número en
	    base decimal a la base especificada:</para>
	<example>
	  <title>Uso de <keycap>ToBase</keycap></title>
	<screen>
<prompt>In> </prompt><userinput>ToBase(16,1044617);</userinput>
<computeroutput>Out> ff089;</computeroutput>
<prompt>In> </prompt>
	</screen>
	</example>
	  </listitem>
	</itemizedlist>
      </sect2>

      <sect2 id="p-adica">
	<title>Expansiones en base n</title>

	<para>Podemos encontrar la expansión de un determinado número
	en base n:</para>

	<example>
	  <title>Uso de <keycap>PAdicExpand</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>PAdicExpand(156,10)</userinput>
<computeroutput>Out> 5*10+10^2+6;</computeroutput>
<prompt>In></prompt>
          </screen>
	</example>
      </sect2>

      <sect2 id="rationalize">
	<title>Aproximaciones racionales de números reales</title>
	<para>Podemos aproximar números reales por números racionales
	  mediante el uso de <keycap>Rationalize</keycap>:</para>
	<example>
	  <title>Uso de <keycap>Rationalize</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>N(Pi);</userinput>
<computeroutput>Out> 3.1415926536;</computeroutput>
<prompt>In> </prompt><userinput>Rationalize(%);</userinput>
<computeroutput>Out> 3926990817/1250000000;</computeroutput>
<prompt>In> </prompt><userinput>{1.2,56.098,-0.65};</userinput>
<computeroutput>Out> {1.2,56.098,-0.65};</computeroutput>
<prompt>In> </prompt><userinput>Rationalize(%);</userinput>
<computeroutput>Out> {6/5,28049/500,-13/20};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="redondeos">
	<title>Redondeos</title>

	<para>Disponemos de varias funciones para redondear:</para>

	<itemizedlist>
	  <listitem>
	    <para><keycap>Ceil</keycap> redondea al menor entero
	    mayor.</para>
	    <example>
	      <title>Uso de <keycap>Ceil</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>Ceil(2.8);</userinput>
<computeroutput>Out> 3;</computeroutput>
<prompt>In> </prompt><userinput>Ceil(-2.8);</userinput>
<computeroutput>Out> -2;</computeroutput>
<prompt>In></prompt>
              </screen>
	    </example>
	  </listitem>
	  <listitem>
	    <para><keycap>Floor</keycap> redondea al mayor entero
	    menor.</para>
	    <example>
	      <title>Uso de <keycap>Floor</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>Floor(2.8);</userinput>
<computeroutput>Out> 2;</computeroutput>
<prompt>In> </prompt><userinput>Floor(-2.8);</userinput>
<computeroutput>Out> -3;</computeroutput>
<prompt>In></prompt>
              </screen>
	    </example>
	  </listitem>
	  <listitem>
	    <para><keycap>Round</keycap> redondea al entero más
	    cercano.</para>
	    <example>
	      <title>Uso de <keycap>Round</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>Round(2.49);</userinput>
<computeroutput>Out> 3;</computeroutput>
<prompt>In> </prompt><userinput>Round(2.51);</userinput>
<computeroutput>Out> 3;</computeroutput>
<prompt>In></prompt>
              </screen>
	    </example>
	  </listitem>
	</itemizedlist>
      </sect2>

      <sect2 id="isprime">
	<title>Determinación de números primos</title>

	<para>Podemos comprobar cuando un número es primo o no
	  utilizando la función <keycap>IsPrime</keycap>:</para>
	<example>
	  <title>Uso de <keycap>IsPrime</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>IsPrime(25);</userinput>
<computeroutput>Out> False;</computeroutput>
<prompt>In> </prompt><userinput>IsPrime(7);</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In></prompt>
          </screen>
	</example>

	<para>Esta función comprueba si los números comprendidos entre
	2 y la raíz cuadrada del número a comprobar su primalidad lo
	dividen. No es un algoritmo optimo y consume mucho tiempo de
	ejecución para números grandes.</para>
      </sect2>

      <sect2 id="factorizacion-primos">
	<title>Factorización en números primos</title>
	<para>Para factorizar un número en factores primos podemos
	  utilizar <keycap>Factors</keycap>:</para>

	<example>
	  <title>Uso de <keycap>Factors</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>Factors(50);</userinput>
<computeroutput>Out> {{2,1},{5,2}};</computeroutput>
<prompt>In></prompt>
          </screen>
	</example>

	<para>También es posible utilizar
	<keycap>Factor</keycap>:</para>
	<example>
	  <title>Uso de <keycap>Factor</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>Factor(50);</userinput>
<computeroutput>Out> 2*5^2;</computeroutput>
<prompt>In></prompt>
          </screen>
	</example>
      </sect2>

    </sect1>

    <sect1 id="operaciones-complejos">
      <title>Operaciones sobre números complejos</title>

      <para><acronym>YACAS</acronym> supone que todos los números son
      reales, pero también puede trabajar con complejos:</para>

      <sect2 id="representacion-complejos">
	<title>Representacion de números complejos</title>

	<para>Lo primero que tenemos que tener en cuenta es que la
	  unidad imaginaria es <keycap>I</keycap>, siempre en
	  mayúsculas.</para>
	<screen>
<prompt>In> </prompt><userinput>2+3*I;</userinput>
<computeroutput>Out> Complex(2,3);</computeroutput>
<prompt>In></prompt>
	</screen>
	<para>La función <keycap>Complex</keycap> se utiliza para la
	representación de números complejos, pero también es posible
	trabajar con ellos en la forma usual:</para>
	<screen>
<prompt>In> </prompt><userinput>(2+3*I)+(1-5*I);</userinput>
<computeroutput>Out> Complex(3,-2);</computeroutput>
<prompt>In> </prompt>
	</screen>
 
      </sect2>

      <sect2 id="real-imaginaria">
	<title>Determinación de las partes real e imaginaria de un
	complejo</title>

	<para>Para determinar las partes real e imaginaria de un
	  número complejo podemos utilizar <keycap>Re</keycap> e
	  <keycap>Im</keycap>:</para>
	<example>
	  <title>Partes real y compleja de un número complejo</title>
	  <screen>
<prompt>In> </prompt><userinput>Re(Complex(2,3));</userinput>
<computeroutput>Out> 2;</computeroutput>
<prompt>In> </prompt><userinput>Im(Complex(2,3));</userinput>
<computeroutput>Out> 3;</computeroutput>
<prompt>In></prompt>
          </screen>
	</example>
      </sect2>

      <sect2 id="modulo-argumento">
	<title>Determinación del módulo y el argumento de un número
	complejo</title>

	<para>Para la determinación del módulo de un número complejo
	  podemos utilizar <keycap>Abs</keycap>:</para>
	<example>
	  <title>Módulo de un número complejo</title>
	  <screen>
<prompt>In> </prompt><userinput>Abs(2+3*I);</userinput>
<computeroutput>Out> Sqrt(13);</computeroutput>
<prompt>In> </prompt>
	  </screen>    
	</example>
	<para>Para la determinación del argumento de un número
	  complejo podemos utilizar <keycap>Arg</keycap>:</para>
	<example>
	  <title>Argumento de un número complejo</title>
	  <screen>
<prompt>In> </prompt><userinput>Arg(2+3*I);</userinput>
<computeroutput>Out> ArcTan(3/2);</computeroutput>
<prompt>In> </prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="conjugado">
	<title>Conjugado de un número complejo</title>

	<para>Podemos calcular el conjugado de un número complejo con
	  <keycap>Conjugate</keycap>:</para>
	<example>
	  <title>Conjugado de un número complejo</title>
	  <screen>
<prompt>In> </prompt><userinput>Conjugate(2+3*I);</userinput>
<computeroutput>Out> Complex(2,-3);</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

    </sect1>

    <sect1 id="operaciones-listas">
      <title>Operaciones sobre listas</title>

      <para>Veamos algunas de las operaciones que podemos realizar con
      listas.</para>

      <sect2 id="list">
	<title>Creando listas</title>

	<para>Podemos crear listas de varias formas:</para>

	<orderedlist>
	  <listitem>
	    <para>Declarandolas directamente:</para>
	    <screen>
<prompt>In> </prompt><userinput>NuevaLista:={2,5,6};</userinput>
<computeroutput>Out> {2,5,6};</computeroutput>
<prompt>In></prompt>
	    </screen>
	  </listitem>
	  <listitem>
	    <para>Utilizando la función <keycap>List</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>List</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>NuevaLista:=List(2,5,6);</userinput>
<computeroutput>Out> {2,5,6};</computeroutput>
<prompt>In> </prompt><userinput>OtraLista:=List(NuevaLista,a,b,c);</userinput>
<computeroutput>Out> {{2,5,6},a,b,c};</computeroutput>
<prompt>In></prompt>	      
	      </screen>
	    </example>
	    <para>Una lista puede ser un elemento de otra lista.</para>
	  </listitem>
	  <listitem>
	    <para>Podemos crear una lista concatenando
	      varias con <keycap>Concat</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>Concat</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>PrimeraLista:={a,b,c,d};</userinput>
<computeroutput>Out> {a,b,c,d};</computeroutput>
<prompt>In> </prompt><userinput>SegundaLista:={1,3,5,7,11};</userinput>
<computeroutput>Out> {1,3,5,7,11};</computeroutput>
<prompt>In> </prompt><userinput>ListaFinal:=Concat(PrimeraLista,SegundaLista)</userinput>
<computeroutput>Out> {a,b,c,d,1,3,5,7,11};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	    <para>Hay que tener en cuenta que de esta forma pueden
	    aparecer elementos duplicados:</para>
	    <screen>
<prompt>In> </prompt><userinput>PrimeraLista:={a,b,c,d};</userinput>
<computeroutput>Out> {a,b,c,d};</computeroutput>
<prompt>In> </prompt><userinput>SegundaLista:={d,1,f,a};</userinput>
<computeroutput>Out> {d,1,f,a};</computeroutput>
<prompt>In> </prompt><userinput>Concat(PrimeraLista, SegundaLista);</userinput>
<computeroutput>Out> {a,b,c,d,d,1,f,a};</computeroutput>
<prompt>In></prompt>
	    </screen>
	  </listitem>
	  <listitem>
	    <para>Podemos crear una lista como la unión de otras dos
	      con <keycap>Union</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>Union</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>PrimeraLista:={a,b,c,d};</userinput>
<computeroutput>Out> {a,b,c,d};</computeroutput>
<prompt>In> </prompt><userinput>SegundaLista:={d,1,f,a};</userinput>
<computeroutput>Out> {d,1,f,a};</computeroutput>
<prompt>In> </prompt><userinput>Union(PrimeraLista,SegundaLista);</userinput>
<computeroutput>Out> {a,b,c,d,1,f};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	    <para>Observar que en este caso se eliminan los elementos
	      repetidos, no como con <keycap>Concat</keycap>.</para>
	  </listitem>

	  <listitem>
	    <para>Podemos crear una lista como la intersección de
	      otras dos con <keycap>Intersection</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>Intersection</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>PrimeraLista:={a,b,c,d};</userinput>
<computeroutput>Out> {a,b,c,d};</computeroutput>
<prompt>In> </prompt><userinput>SegundaLista:={d,1,f,a};</userinput>
<computeroutput>Out> {d,1,f,a};</computeroutput>
<prompt>In> </prompt><userinput>Intersection(PrimeraLista, SegundaLista);</userinput>
<computeroutput>Out> {a,d};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	  </listitem>
	  <listitem>
	    <para>Podemos crear una lista que sea la diferencia de dos
	      listas con <keycap>Difference</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>Difference</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>PrimeraLista:={a,b,c,d};</userinput>
<computeroutput>Out> {a,b,c,d};</computeroutput>
<prompt>In> </prompt><userinput>SegundaLista:={d,1,f,a};</userinput>
<computeroutput>Out> {d,1,f,a};</computeroutput>
<prompt>In> </prompt><userinput>Difference(PrimeraLista, SegundaLista);</userinput>
<computeroutput>Out> {b,c};</computeroutput>
<prompt>In></prompt>
	      </screen>
	      <para>Se mostrarán los elementos que están en
		<keycap>PrimeraLista</keycap> y que no están en
		<keycap>SegundaLista</keycap>, preservando el
		orden.</para>
	      <para>Tenemos que destacar que si hay un cierto elemento
		que parece <keycap>n</keycap> veces en la primera
		lista y <keycap>m</keycap> veces en la segunda
		entonces aparecerá <keycap>n-m</keycap> veces en la diferencia.</para>
	    </example>
	  </listitem>
	  <listitem>
	    <para>Podemos crear una lista con todos sus componentes
	      iguales utilizando <keycap>FillList</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>FillList</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>FillList(Pi,5);</userinput>
<computeroutput>Out> {Pi,Pi,Pi,Pi,Pi};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	  </listitem>
	  <listitem>
	    <para>Podemos crear listas eliminando elementos de una
	      lista ya creada con <keycap>Drop</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>Drop</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>Lista:={a,b,c,d,e,f,g,h,i,j,k};</userinput>
<computeroutput>Out> {a,b,c,d,e,f,g,h,i,j,k};</computeroutput>
<prompt>In> </prompt><userinput>Drop(Lista,3);</userinput>
<computeroutput>Out> {d,e,f,g,h,i,j,k}</computeroutput>
<prompt>In> </prompt><userinput>Drop(Lista,-3);</userinput>
<computeroutput>Out> {a,b,c,d,e,f,g,h}</computeroutput>
<prompt>In> </prompt><userinput>Drop(Lista,{4,8});</userinput>
<computeroutput>Out> {a,b,c,i,j,k};</computeroutput>
<prompt>In> </prompt><userinput>Lista;</userinput>
<computeroutput>Out> {a,b,c,d,e,f,g,h,i,j,k};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	    <para><keycap>Drop</keycap> elimina los elementos indicados.</para>
	  </listitem>
	  <listitem>
	    <para>Podemos crear listas cogiendo elementos de una
	      lista ya creada con <keycap>Take</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>Take</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>Lista:={a,b,c,d,e,f,g,h,i,j,k};</userinput>
<computeroutput>Out> {a,b,c,d,e,f,g,h,i,j,k};</computeroutput>
<prompt>In> </prompt><userinput>Take(Lista,3);</userinput>
<computeroutput>Out> {a,b,c}</computeroutput>
<prompt>In> </prompt><userinput>Take(Lista,-3);</userinput>
<computeroutput>Out> {i,j,k}</computeroutput>
<prompt>In> </prompt><userinput>Take(Lista,{4,8});</userinput>
<computeroutput>Out> {d,e,f,g,h};</computeroutput>
<prompt>In> </prompt><userinput>Lista;</userinput>
<computeroutput>Out> {a,b,c,d,e,f,g,h,i,j,k};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	    <para><keycap>Take</keycap> coge los elementos indicados.</para>
	  </listitem>
	  <listitem>
	    <para>Podemos crear listas evaluando una cierta expresión
	    desde un punto hasta otro e indicando el paso:</para>
	    <example>
	      <title>Uso de <keycap>Table</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>Table(i,i,1.,2,.1);</userinput>
<computeroutput>Out> {1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2};</computeroutput>
<prompt>In> </prompt><userinput>Table(n!,n,2,5,1);</userinput>
<computeroutput>Out> {2,6,24,120};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	  </listitem>
	  <listitem>
	    <para>Podemos crear listas cuyos elementos sean números
	      consecutivos con el operador <keycap>..</keycap>:</para>
	    <example>
	      <title>Uso del operador <keycap>..</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>a:=1 .. 8;</userinput>
<computeroutput>Out> {1,2,3,4,5,6,7,8};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	  </listitem>
	</orderedlist>

      </sect2>

      <sect2 id="evaluacion-sobre-listas">
	<title>Evaluación de funciones sobre listas</title>

	<para>Existen funciones que permiten su evaluación sobre todos
	los elementos de una lista.</para>

	<para>Este tipo de funciones son normalmente funciones
	numéricas:</para>
	<screen>
<prompt>In> </prompt><userinput>Valores:={Pi,3*Pi/2,0,2*Pi};</userinput>
<computeroutput>Out> {Pi,3*Pi/2,0,2*Pi};</computeroutput>
<prompt>In> </prompt><userinput>Res:=Sin(Valores);</userinput>
<computeroutput>Out> {0,Sin((3*Pi)/2),0,Sin(2*Pi)};</computeroutput>
<prompt>In> </prompt><userinput>N(Res);</userinput>
<computeroutput>Out> {0,-1.000000,0,0.000000};</computeroutput>
<prompt>In></prompt>
	</screen>
      </sect2>

      <sect2 id="operaciones-aritmeticas-listas">
	<title>Operaciones aritméticas sobre listas</title>

	<para>Podemos realizar operaciones aritméticas sobre
	listas:</para>
	<itemizedlist>
	  <listitem>
	    <para>Con el operador <keycap>+/-</keycap> podemos
	    sumar/restar listas:</para>
	    <screen>
<prompt>In> </prompt><userinput>{1,2,3}+{3,2,1};</userinput>
<computeroutput>Out> {4,4,4};</computeroutput>
<prompt>In> </prompt>
	    </screen>
	    <para>Las sumas/restas se harán miembro a miembro.</para>
	  </listitem>
	  <listitem>
	    <para>Con el operador <keycap>*</keycap> podemos
	    multiplicar listas miembro a miembro:</para>
	    <screen>
<prompt>In> </prompt><userinput>{1,2,3}*{4,5,6};</userinput>
<computeroutput>Out> {4,10,18};</computeroutput>
<prompt>In></prompt>
	    </screen>
	    <para>Con este operador también podemos multiplicar todos
	    los elementos de una lista por un escalar:</para>
	    <screen>
<prompt>In> </prompt><userinput>a*{3,6,7};</userinput>
<computeroutput>Out> {3*a,6*a,7*a};</computeroutput>
<prompt>In></prompt>
	    </screen>
	  </listitem>
	  <listitem>
	    <para>Con el operador <keycap>/</keycap> podemos dividir
	    listas miembro a miembro:</para>
	    <screen>
<prompt>In> </prompt><userinput>{2,3,4}/{5,6,7};</userinput>
<computeroutput>Out> {2/5,1/2,4/7};</computeroutput>
<prompt>In></prompt>
	    </screen>
	    <para>Con este operador también podemos dividir todos
	    los elementos de una lista por un escalar:</para>
	    <screen>
<prompt>In> </prompt><userinput>{2,3,4}/4;</userinput>
<computeroutput>Out> {1/2,3/4,1};</computeroutput>
<prompt>In></prompt>
	    </screen>
	  </listitem>
	  <listitem>
	    <para>Con el operador <keycap>^</keycap> podemos elevar
	    los elementos de la primera lista a los de la segunda
	    componente a componente:</para>
	    <screen>
<prompt>In> </prompt><userinput>{2,3,5}^{0,2,-2};</userinput>
<computeroutput>Out> {1,9,1/25};</computeroutput>
<prompt>In></prompt>
	    </screen>
	    <para>Con este operador también podemos elevar todos los
	    elementos de una lista a un escalar:</para>
	    <screen>
<prompt>In> </prompt><userinput>{2,3,5}^2;</userinput>
<computeroutput>Out> {4,9,25};</computeroutput>
<prompt>In></prompt>
	    </screen>
	  </listitem>
	</itemizedlist>
      </sect2>

      <sect2 id="length">
	<title>Calculando la longitud de una lista</title>

	<para>Para calcular la longitud de una lista podemos utilizar
	  la función <keycap>Length</keycap>:</para>
	<example>
	  <title>Uso de <keycap>Length</keycap></title>
	  <screen>
<prompt>In ></prompt><userinput>a:={a,b,3,5,Sin(x)};</userinput>
<computeroutput>Out> {a,b,3,5,Sin(x)};</computeroutput>
<prompt>In> </prompt><userinput>Length(a);</userinput>
<computeroutput>Out> 5;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>

      </sect2>

      <sect2 id="recuperando-elm-lista">
	<title>Recuperando elementos de una lista</title>

	<para>Tenemos varias funciones para recuperar elementos de una
	lista:</para>

	<itemizedlist>
	  <listitem>
	    <para>Pare recuperar el primer elemento podemos utilizar
	      <keycap>Head</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>Head</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>MiLista:={a,b,c,d};</userinput>
<computeroutput>Out> {a,b,c,d};</computeroutput>
<prompt>In> </prompt><userinput>Primer:=Head(MiLista);</userinput>
<computeroutput>Out> a;</computeroutput>
<prompt>In> </prompt><userinput>MiLista;</userinput>
<computeroutput>Out> {a,b,c,d};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	    <para><keycap>Head</keycap> no elimina el primer elemento
	    de la lista.</para>
	    <para>Si <keycap>Head</keycap> es utilizado sobre una
	    expresión devuelve el primer operando:</para>
	    <screen>
<prompt>In> </prompt><userinput>Head(a*b);</userinput>
<computeroutput>Out> a;</computeroutput>
<prompt>In> </prompt><userinput>Head(Hold((2*3)+(4^5)));</userinput>
<computeroutput>Out> 2*3;</computeroutput>	    
<prompt>In> </prompt><userinput>Head(func(z,y,z));</userinput>
<computeroutput>Out> a;</computeroutput>
<prompt>In></prompt>
	    </screen>
	    <para>Pero si <keycap>Head</keycap> es utilizado sobre un
	    átomo devolverá un error:</para>
	    <screen>
<prompt>In> </prompt><userinput>Head((2*3)+(4^5));</userinput>
<computeroutput>In function "Head" :</computeroutput>
<computeroutput>bad argument number 1 (counting from 1)</computeroutput>
<computeroutput>The offending argument 2*3+4^5 evaluated to 1030</computeroutput>
<computeroutput>CommandLine(1) : Argument is not a list</computeroutput>
<computeroutput> </computeroutput>
<prompt>In></prompt>
	    </screen>
	  </listitem>
	  <listitem>
	    <para>Podemos recuperar todos los elementos salvo el
	      primero con <keycap>Tail</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>Tail</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>Lista:={2,4,6,8};</userinput>
<computeroutput>Out> {2,4,6,8};</computeroutput>
<prompt>In> </prompt><userinput>Tail(Lista);</userinput>
<computeroutput>Out> {4,6,8};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	  </listitem>
	  <listitem>
	    <para>Para recuperar cualquier otro elemento o grupo de
	      elementos de la lista podemos utilizar <keycap>Nth</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>Nth</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>MiLista:={a,b,c,d,e,f};</userinput>
<computeroutput>Out> {a,b,c,d,e,f};</computeroutput>
<prompt>In> </prompt><userinput>Nth(MiLista,5);</userinput>
<computeroutput>Out> e;</computeroutput>
<prompt>In> </prompt><userinput>SubLista:=Nth(MiLista,{2,4,6});</userinput>
<computeroutput>Out> {b,d,f};</computeroutput>	      
<prompt>In> </prompt><userinput>SubLista;</userinput>
<computeroutput>Out> {b,d,f};</computeroutput>	      
<prompt>In></prompt>
	      </screen>
	    </example>
	  </listitem>
	  <listitem>
	    <para>También podemos recuperar elementos de una lista
	      utilizando <keycap>[]</keycap>:</para>
	      <screen>
<prompt>In> </prompt><userinput>MiLista:={a,b,c,d,e,f};</userinput>
<computeroutput>Out> {a,b,c,d,e,f};</computeroutput>
<prompt>In> </prompt><userinput>MiLista[5];</userinput>
<computeroutput>Out> e;</computeroutput>
<prompt>In> </prompt><userinput>SubLista:=MiLista[{2,4,6}];</userinput>
<computeroutput>Out> {b,d,f};</computeroutput>	      
<prompt>In> </prompt><userinput>SubLista;</userinput>
<computeroutput>Out> {b,d,f};</computeroutput>	      
<prompt>In></prompt>
	      </screen>
	  </listitem>
	  <listitem>
	    <para>Podemos seleccionar dentro de una lista aquellos
	    elementos que cumplan una determinada condición utilizando
	      <keycap>Select</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>Select</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>MiLista:={2/3,a,4,{a,6,y},2*3,Hold(a+b=c),{{1,0},{0,1}},Sin(z),"Hola",2.5,2+4*I,Pi,{2,3,5}};</userinput>
<computeroutput>Out> {2/3,a,4,{a,6,y},6,a+b=c,{{1,0},{0,1}},Sin(z),"Hola",2.5,Complex(2,4),Pi,{2,3,5}};</computeroutput>
<prompt>In> </prompt><userinput>Enteros:=Select("IsInteger",MiLista);</userinput>
<computeroutput>Out> {4,6};</computeroutput>
<prompt>In> </prompt><userinput>Complejos:=Select("IsComplex",MiLista);</userinput>
<computeroutput>Out> {4,6,2.5,Complex(2,4)};</computeroutput>
<prompt>In> </prompt><userinput>Matrices:=Select("IsMatrix",MiLista);</userinput>
<computeroutput>Out> {{{1,0},{0,1}}};</computeroutput>
<prompt>In> </prompt><userinput>Racionales:=Select("IsRational",MiLista);</userinput>
<computeroutput>Out> {2/3};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	    <para>La función <keycap>Select</keycap> evalua el primer
	    argumento sobre la lista y devuelve aquellos elementos de
	      la lista que finalizaron con <keycap>True</keycap>.</para>
	  </listitem>
	</itemizedlist>
      </sect2>

      <sect2 id="Alterando-lista">
	<title>Alterando una lista</title>

	<para>Podemos eliminar elementos de una lista:</para>

	<itemizedlist>
	  <listitem>
	    <para>Utilizando <keycap>Delete</keycap> se devuelve una
	    lista nueva sin el elemento seleccionado:</para>
	    <example>
	      <title>Uso de <keycap>Delete</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>Lista:={2,b,4,d};</userinput>
<computeroutput>Out> {2,b,4,d};</computeroutput>
<prompt>In> </prompt><userinput>Delete(Lista,3);</userinput>
<computeroutput>Out> {2,b,d};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	  </listitem>
	  <listitem>
	    <para>Utilizando <keycap>DestructiveDelete</keycap>
	    eliminamos un elemento de la lista indicada:</para>
	    <example>
	      <title>Uso de <keycap>DestructiveDelete</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>Lista:={2,b,4,d};</userinput>
<computeroutput>Out> {2,b,4,d};</computeroutput>
<prompt>In> </prompt><userinput>DestrutiveDelete(Lista,3);</userinput>
<computeroutput>Out> {2,b,d};</computeroutput>
<prompt>In> </prompt><userinput>Lista;</userinput>
<computeroutput>Out> {2,b,d};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	  </listitem>
	</itemizedlist>

	<para>Podemos reemplazar elementos en una lista utilizando
	  <keycap>Replace</keycap> y
	  <keycap>DestructiveReplace</keycap>. Su funcionamiento es
	  similar a <keycap>Delete</keycap> y
	  <keycap>DestructiveDelete</keycap>, pero reemplazando
	  elementos en lugar de eliminarlos. Estas funciones tienen un
	  tercer elemento que será el elemento que sustituirá al
	  elemento indicado por el segundo argumento en la lista
	  indicada por el primer argumento.</para>
	<example>
	  <title>Uso de <keycap>Replace</keycap> y <keycap>DestructiveReplace</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>MiLista:={a,b,c,d,e};</userinput>
<computeroutput>Out> {a,b,c,d,e};</computeroutput>
<prompt>In> </prompt><userinput>Replace(MiLista,3,C);</userinput>
<computeroutput>Out> {a,b,C,d,e};</computeroutput>
<prompt>In> </prompt><userinput>MiLista;</userinput>
<computeroutput>Out> {a,b,c,d,e};</computeroutput>
<prompt>In> </prompt><userinput>DestructiveReplace(MiLista,3,C);</userinput>
<computeroutput>Out> {a,b,C,d,e};</computeroutput>
<prompt>In> </prompt><userinput>MiLista;</userinput>
<computeroutput>Out> {a,b,C,d,e};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>

	<para>También podemos insertar elementos en una lista
	  utilizando <keycap>Insert</keycap> y
	  <keycap>DestructiveInsert</keycap>. Su funcionamiento es
	  similar a <keycap>Replace</keycap> y
	  <keycap>DestructiveReplace</keycap>, pero insertando el
	  tercer argumento que se le pasa en la posición indicada por
	  el segundo argumento en la lista indicada por el primer
	  argumento.</para>
	<example>
	  <title>Uso de <keycap>Insert</keycap> y <keycap>DestructiveInsert</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>MiLista:={a,b,d,e};</userinput>
<computeroutput>Out> {a,b,d,e};</computeroutput>
<prompt>In> </prompt><userinput>Insert(MiLista,3,C);</userinput>
<computeroutput>Out> {a,b,C,d,e};</computeroutput>
<prompt>In> </prompt><userinput>MiLista;</userinput>
<computeroutput>Out> {a,b,d,e};</computeroutput>
<prompt>In> </prompt><userinput>DestructiveInsert(MiLista,3,C);</userinput>
<computeroutput>Out> {a,b,C,d,e};</computeroutput>
<prompt>In> </prompt><userinput>MiLista;</userinput>
<computeroutput>Out> {a,b,C,d,e};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>

	<para>Podemos añadir elementos a una lista con
	  <keycap>Append</keycap> y
	  <keycap>DestructiveAppend</keycap>. Su funcionamiento es
	  similar a los anteriores y tiene dos argumentos, el primero
	  es la lista a la que se le añadirá el elemento que se
	  especifica como segundo argumento. El elemento se añadirá al
	  final de la lista.</para>
	<example>
	  <title>Uso de <keycap>Append</keycap> y <keycap>DestructiveAppend</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>MiLista:={a,b,c,d,e};</userinput>
<computeroutput>Out> {a,b,c,d,e};</computeroutput>
<prompt>In> </prompt><userinput>Append(MiLista,Infinity);</userinput>
<computeroutput>Out> {a,b,c,d,e,Infinity};</computeroutput>
<prompt>In> </prompt><userinput>MiLista;</userinput>
<computeroutput>Out> {a,b,c,d,e};</computeroutput>
<prompt>In> </prompt><userinput>DestructiveAppend(MiLista,Undefined);</userinput>
<computeroutput>Out> {a,b,c,d,e,Undefined};</computeroutput>
<prompt>In> </prompt><userinput>MiLista;</userinput>
<computeroutput>Out> {a,b,c,d,e,Undefined};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>

	<para>Podemos eliminar elementos duplicados en una lista
	  utilizando <keycap>RemoveDuplicates</keycap>:</para>
	<example>
	  <title>Uso de <keycap>RemoveDuplicates</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>MiLista:={a,b,c,a,d,b,c,e};</userinput>
<computeroutput>Out> {a,b,c,a,d,b,c,e};</computeroutput>
<prompt>In> </prompt><userinput>RemoveDuplicates(MiLista);</userinput>
<computeroutput>Out> {a,b,c};</computeroutput>
<prompt>In> </prompt><userinput>MiLista;</userinput>
<computeroutput>Out> {a,b,c,a,d,b,c,e};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>

	<para>También es posible intercambiar dos elementos con la
	  función <keycap>Swap</keycap>:</para>
	<example>
	  <title>Uso de <keycap>Swap</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>Lista:={a,b,c,d,e,f};</userinput>
<computeroutput>Out> {a,b,c,d,e,f};</computeroutput>
<prompt>In> </prompt><userinput>Swap(Lista,1,2);</userinput>
<computeroutput>Out> True;</computeroutput>
<prompt>In> </prompt><userinput>Lista;</userinput>
<computeroutput>Out> {b,a,c,d,e,f};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="contando-ocurrencias">
	<title>Contando ocurrencias</title>

	<para>Podemos contar el número de ocurrencias de un elemento
	  en una lista con <keycap>Count</keycap>:</para>
	<example>
	  <title>Uso de <keycap>Count</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>Lista:={a,b,a,c,e,a,g,a};</userinput>
<computeroutput>Out> {a,b,a,c,e,a,g,a};</computeroutput>
<prompt>In> </prompt><userinput>Count(Lista,a);</userinput>
<computeroutput>Out> 4;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>

      </sect2>

      <sect2 id="find">
	<title>Encontrando un elemento en una lista</title>

	<para>Podemos encontrar la posición que ocupa un determinado
	  elemento en una lista con <keycap>Find</keycap>:</para>
	<example>
	  <title>Uso de <keycap>Find</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>Lista:={a,b,c,b,e,d};</userinput>
<computeroutput>Out> {a,b,c,b,e,d};</computeroutput>
<prompt>In> </prompt><userinput>Find(Lista,b);</userinput>
<computeroutput>Out> 2;</computeroutput>
<prompt>In> </prompt><userinput>Find(Lista,Pi);</userinput>
<computeroutput>Out> -1;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
	<para>Si el elemento aparece más de una vez devuelve la
	posición de la primera ocurrencia. En caso de no aparecer en
	la lista devolverá un -1.</para>
      </sect2>

      <sect2 id="ordenando-listas">
	<title>Ordenando listas</title>

	<para>Podemos ordenar listas de la siguiente manera:</para>
	<orderedlist>
	  <listitem>
	    <para>Con la función <keycap>BubbleSort</keycap>. De esta
	    forma se utiliza el algoritmo de la burbuja:</para>
	    <example>
	      <title>Uso de <keycap>BubbleSort</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>Lista:={2,6,7,84,5,2,8,-4};</userinput>
<computeroutput>Out> {2,6,7,84,5,2,8,-4};</computeroutput>
<prompt>In> </prompt><userinput>BubbleSort(Lista,>);</userinput>
<computeroutput>Out> {84,8,7,6,5,2,2,-4};</computeroutput>
<prompt>In> </prompt><userinput>BubbleSort(Lista,<);</userinput>
<computeroutput>Out> {-4,2,2,5,6,7,8,84};</computeroutput>
<prompt>In> </prompt><userinput>Lista;</userinput>
<computeroutput>Out> {2,6,7,84,5,2,8,-4};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	    <para>El tercer argumento es la función de ordenamiento,
	      para valores numéricos podemos utilizar
	      <keycap>></keycap> y <keycap><</keycap> como funciones
	      de ordenamiento.</para>
	    <para>En el caso de querer ordenar una lista con valores
	      no numéricos deberemos construir una función de
	      ordenamiento que tendrá que verificar:</para>
	    <itemizedlist>
	      <listitem>
		<para>Será una función que requiera dos argumentos.</para>
	      </listitem>
	      <listitem>
		<para>Unicamente devolverá los valores
		  <keycap>True</keycap> y <keycap>False</keycap>.</para>
	      </listitem>
	      <listitem>
		<para>Devolverá el valor <keycap>True</keycap> si el
		segundo argumento tiene que ir después del primero en la
		lista ordenada.</para>
	      </listitem>
	      <listitem>
		<para>Devolverá el valor <keycap>False</keycap> en el
		resto de casos.</para>
	      </listitem>
	    </itemizedlist>
	    <para>El algoritmo de la burbuja es ineficiente para
	    listas grandes. En el caso de tener que reordenar listas
	    grandes se debería utilizar la función del siguiente punto.</para>
	  </listitem>
	  <listitem>
	    <para>Con la función <keycap>HeapSort</keycap>:</para>
	    <example>
	      <title>Uso de <keycap>HeapSort</keycap></title>
	      <screen>
<prompt>In> </prompt><userinput>Lista:={2,6,7,84,5,2,8,-4};</userinput>
<computeroutput>Out> {2,6,7,84,5,2,8,-4};</computeroutput>
<prompt>In> </prompt><userinput>HeapSort(Lista,>);</userinput>
<computeroutput>Out> {84,8,7,6,5,2,2,-4};</computeroutput>
<prompt>In> </prompt><userinput>HeapSort(Lista,<);</userinput>
<computeroutput>Out> {-4,2,2,5,6,7,8,84};</computeroutput>
<prompt>In> </prompt><userinput>Lista;</userinput>
<computeroutput>Out> {2,6,7,84,5,2,8,-4};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	    <para>El tercer argumento es la función de ordenamiento,
	      para valores numéricos podemos utilizar
	      <keycap>></keycap> y <keycap><</keycap> como funciones
	      de ordenamiento.</para>
	    <para>En el caso de querer ordenar una lista con valores
	      no numéricos deberemos construir una función de
	      ordenamiento que tendrá que verificar:</para>
	    <itemizedlist>
	      <listitem>
		<para>Será una función que requiera dos argumentos.</para>
	      </listitem>
	      <listitem>
		<para>Unicamente devolverá los valores
		  <keycap>True</keycap> y <keycap>False</keycap>.</para>
	      </listitem>
	      <listitem>
		<para>Devolverá el valor <keycap>True</keycap> si el
		segundo argumento tiene que ir después del primero en la
		lista ordenada.</para>
	      </listitem>
	      <listitem>
		<para>Devolverá el valor <keycap>False</keycap> en el
		resto de casos.</para>
	      </listitem>
	    </itemizedlist>
	    <para>Este argumento es mucho más eficiente que el de la
	    burbuja para listas grandes.</para>
	  </listitem>
	</orderedlist>

      </sect2>

      <sect2 id="partition">
	<title>Particionando una lista</title>

	<para>Podemos partir una lista en trozos de igual longitud con
	  <keycap>Partition</keycap>:</para>
	<example>
	  <title>Uso de <keycap>Partition</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>Lista:={a,b,c,d,e,f,g};</userinput>
<computeroutput>Out> {a,b,c,d,e,f,g};</computeroutput>
<prompt>In> </prompt><userinput>Partition(Lista,2);</userinput>
<computeroutput>Out> {{a,b},{c,d},{e,f}};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
	<para>Todos los miembros de la nueva lista tendrán la longitud
	especificada, y los que sobren no se incluirán.</para>
      </sect2>

      <sect2 id="permutaciones">
	<title>Permutaciones de una lista</title>
 
	<para>Podemos calcular las permutaciones de un conjunto de n
	  elementos con <keycap>Permutations</keycap>:</para>
	<example>
	  <title>Permutaciones de un conjunto de n elementos</title>
	  <screen>
<prompt>In> </prompt><userinput>Permutations({a1,a2,a3});</userinput>
<computeroutput>Out> {{a1,a2,a3},{a1,a3,a2},{a3,a1,a2},{a2,a1,a3},{a2,a3,a1},{a3,a2,a1}};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

    </sect1>

    <sect1 id="operaciones-pilas">
      <title>Operaciones sobre pilas</title>

      <para><acronym>YACAS</acronym> representa, internamente, las
      pilas como listas y existen una serie de funciones para operar
      sobre ellas:</para>

      <itemizedlist>

	<listitem>
	  <para>Con <keycap>Push</keycap> introducimos un elemento en
	  una pila:</para>
	  <example>
	    <title>Uso de <keycap>Push</keycap></title>
	    <screen>
<prompt>In> </prompt><userinput>Pila:={};</userinput>
<computeroutput>Out> {};</computeroutput>
<prompt>In> </prompt><userinput>Push(Pila,x1);</userinput>
<computeroutput>Out> {x1};</computeroutput>
<prompt>In> </prompt><userinput>Push(Pila,x2);</userinput>
<computeroutput>Out> {x2,x1};</computeroutput>
<prompt>In> </prompt><userinput>Push(Pila,x3);</userinput>
<computeroutput>Out> {x3,x2,x1};</computeroutput>
<prompt>In> </prompt><userinput>Pila;</userinput>
<computeroutput>Out> {x3,x2,x1};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	</listitem>
	<listitem>
	  <para>Utilizando <keycap>Pop</keycap> podemos eliminar
	    elementos de una pila:</para>
	  <example>
	    <title>Uso de <keycap>Pop</keycap></title>
	    <screen>
<prompt>In> </prompt><userinput>Pila:={};</userinput>
<computeroutput>Out> {};</computeroutput>
<prompt>In> </prompt><userinput>Push(Pila,x1);</userinput>
<computeroutput>Out> {x1};</computeroutput>
<prompt>In> </prompt><userinput>Push(Pila,x2);</userinput>
<computeroutput>Out> {x2,x1};</computeroutput>
<prompt>In> </prompt><userinput>Push(Pila,x3);</userinput>
<computeroutput>Out> {x3,x2,x1};</computeroutput>
<prompt>In> </prompt><userinput>Pop(Pila,3);</userinput>
<computeroutput>Out> x1;</computeroutput>
<prompt>In> </prompt><userinput>Pila;</userinput>
<computeroutput>Out> {x3,x2};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	  <para>Recordar que el último elemento añadido a la pila es
	  accedido con el uno.</para>
	</listitem>
	<listitem>
	  <para>Utilizando <keycap>PopFront</keycap> podemos
	    eliminar el último elemento añadido a la pila:</para>
	  <example>
	    <title>Uso de <keycap>PopFront</keycap></title>
	    <screen>
<prompt>In> </prompt><userinput>Pila:={};</userinput>
<computeroutput>Out> {};</computeroutput>
<prompt>In> </prompt><userinput>Push(Pila,x1);</userinput>
<computeroutput>Out> {x1};</computeroutput>
<prompt>In> </prompt><userinput>Push(Pila,x2);</userinput>
<computeroutput>Out> {x2,x1};</computeroutput>
<prompt>In> </prompt><userinput>Push(Pila,x3);</userinput>
<computeroutput>Out> {x3,x2,x1};</computeroutput>
<prompt>In> </prompt><userinput>PopFront(Pila);</userinput>
<computeroutput>Out> x3;</computeroutput>
<prompt>In> </prompt><userinput>Pila;</userinput>
<computeroutput>Out> {x2,x1};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	  <para>La función <keycap>PopFront</keycap> devuelve el
	  último elemento añadido.</para>
	  </listitem>
	  <listitem>
	    <para>Utilizando <keycap>PopBack</keycap> podemos eliminar
	    el primer elemento añadido a la lista:</para>
	    <example>
	      <title>Uso de <keycap>PopBack</keycap></title>
	    <screen>
<prompt>In> </prompt><userinput>Pila:={};</userinput>
<computeroutput>Out> {};</computeroutput>
<prompt>In> </prompt><userinput>Push(Pila,x1);</userinput>
<computeroutput>Out> {x1};</computeroutput>
<prompt>In> </prompt><userinput>Push(Pila,x2);</userinput>
<computeroutput>Out> {x2,x1};</computeroutput>
<prompt>In> </prompt><userinput>Push(Pila,x3);</userinput>
<computeroutput>Out> {x3,x2,x1};</computeroutput>
<prompt>In> </prompt><userinput>PopBack(Pila);</userinput>
<computeroutput>Out> x1;</computeroutput>
<prompt>In> </prompt><userinput>Pila;</userinput>
<computeroutput>Out> {x3,x2};</computeroutput>
<prompt>In></prompt>
	      </screen>
	    </example>
	  </listitem>
      </itemizedlist>

    </sect1>

    <sect1 id="operaciones-vectores">
      <title>Operaciones sobre vectores</title>

      <para>Los vectores son listas y todas las funciones que actúan
      sobre listas se pueden utilizar sobre vectores, pero existen
      funciones especificas para vectores.</para>

      <sect2 id="producto-escalar">
	<title>Producto escalar de dos vectores</title>

	<para>Para calcular el producto escalar de dos vectores
	  podemos utilizar <keycap>InProduct</keycap> y ambos vectores
	  tienen que tener la misma longitud:</para>
	<example>
	  <title>Producto escalar de dos vectores</title>
	  <screen>
<prompt>In> </prompt><userinput>a:={1,2,3};</userinput>
<computeroutput>Out> {1,2,3};</computeroutput>
<prompt>In> </prompt><userinput>b:={4,5,6};</userinput>
<computeroutput>Out> {4,5,6};</computeroutput>
<prompt>In> </prompt><userinput>InProduct(a,b);</userinput>
<computeroutput>Out> 32;</computeroutput>
<prompt>In> </prompt><userinput>a.b;</userinput>
<computeroutput>Out> 32;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="producto-vectorial">
	<title>Producto vectorial de dos vectores</title>

	<para>Para calcular el producto vectorial de dos vectores
	  podemos utilizar <keycap>CrossProduct</keycap> y ambos vectores
	  tienen que tener longitud tres:</para>
	<example>
	  <title>Producto exterior de dos vectores</title>
	  <screen>
<prompt>In> </prompt><userinput>a:={1,2,3};</userinput>
<computeroutput>Out> {1,2,3};</computeroutput>
<prompt>In> </prompt><userinput>b:={4,5,6};</userinput>
<computeroutput>Out> {4,5,6};</computeroutput>
<prompt>In> </prompt><userinput>CrossProduct(a,b);</userinput>
<computeroutput>Out> {-3,6,-3};</computeroutput>
<prompt>In> </prompt><userinput>a X b;</userinput>
<computeroutput>Out> {-3,6,-3};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="vectores-nulos">
	<title>Creación de vectores nulos</title>

	<para>Podemos crear un vector de longitud n con todas sus
	  componentes nulas con <keycap>ZeroVector</keycap>:</para>
	<example>
	  <title>Uso de <keycap>ZeroVector</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>ZeroVector(3);</userinput>
<computeroutput>Out> {0,0,0};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="vectores-canonicos">
	<title>Vectores canónicos</title>

	<para>Podemos crear los vectores canónicos con
	<keycap>BaseVector</keycap>. Esta función tiene dos
	argumentos:</para>
	<itemizedlist>
	  <listitem>
	    <para>El primer argumento indica el vector. Componente no
	    nula que será igual a uno.</para>
	  </listitem>
	  <listitem>
	    <para>El segundo argumento indica la longitud del
	    vector. Dimensión del espacio vectorial al que pertenece.</para>
	  </listitem>
	</itemizedlist>
	<example>
	  <title>Uso de <keycap>BaseVector</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>BaseVector(1,3);</userinput>
<computeroutput>Out> {1,0,0};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="normalizacion">
	<title>Normalización de vectores</title>

	<para>Normalizar un vector es dejarlo con módulo uno y podemos
	  normalizar vectores con <keycap>Normalize</keycap>:</para>
	<example>
	  <title>Normalización de vectores</title>
	  <screen>
<prompt>In> </prompt><userinput>Normalize({4,0,-3});</userinput>
<computeroutput>Out> {4/5,0,-3/5};</computeroutput>
<prompt>In> </prompt><userinput>% . %;</userinput>
<computeroutput>Out> 1;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

    </sect1>

    <sect1 id="operaciones-matrices">
      <title>Operaciones sobre Matrices</title>

      <para>Las matrices son listas y todas las funciones que actúan
      sobre listas se pueden utilizar sobre matrices, pero existen
      funciones especificas para matrices.</para>

      <sect2 id="operaciones-arit-matrices">
	<title>Operaciones aritmeticas con matrices</title>

	<para>Podemos realizar las operaciones aritmeticas con
	matrices usuales utilizando los operadores:</para>

	<itemizedlist>
	  <listitem>
	    <para><keycap>+</keycap>, para sumar matrices.</para>
	  </listitem>
	  <listitem>
	    <para><keycap>-</keycap>, para restar matrices.</para>
	  </listitem>
	  <listitem>
	    <para><keycap>*</keycap>, para multiplicar matrices.</para>
	  </listitem>
	  <listitem>
	    <para><keycap>^</keycap>, seguido de un entero realiza la
	    exponenciación de la matriz.</para>
	  </listitem>
	</itemizedlist>
      </sect2>

      <sect2 id="matriz-identidad">
	<title>Creación de la matriz identidad</title>

	<para>Podemos crear la matriz identidad con
	<keycap>Identity</keycap>:</para>
	<example>
	  <title>Creación de la matriz identidad</title>
	  <screen>
<prompt>In> </prompt><userinput>Identity(4);</userinput>
<computeroutput>Out> {{1,0,0,0},{0,1,0,0},{0,0,1,0},{0,0,0,1}};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="matriz-nula">
	<title>Creación de matrices nulas</title>

	<para>Podemos crear matrices nulas con
	<keycap>ZeroMatrix</keycap>:</para>
	<example>
	  <title>Creación de matrices nulas</title>
	  <screen>
<prompt>In> </prompt><userinput>ZeroMatrix(2,3);</userinput>
<computeroutput>Out> {{0,0,0},{0,0,0}};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="matriz-diagonal">
	<title>Creación de matrices diagonales</title>

	<para>Podemos crear matrices diagonales con
	<keycap>DiagonalMatrix</keycap>:</para>
	<example>
	  <title>Creación de matrices diagonales</title>
	  <screen>
<prompt>In> </prompt><userinput>DiagonalMatrix({1,2,3,4});</userinput>
<computeroutput>Out> {{1,0,0,0},{0,2,0,0},{0,0,3,0},{0,0,0,4}};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="traspuesta-matriz">
	<title>Cálculo de la matriz traspuesta</title>

	<para>Podemos calcular la matriz traspuesta con
	<keycap>Transpose</keycap>:</para>
	<example>
	  <title>Cálculo de la matriz traspuesta</title>
	  <screen>
<prompt>In> </prompt><userinput>Transpose({{1,2,3},{4,5,6},{7,8,9}});</userinput>
<computeroutput>Out> {{1,4,7},{2,5,8},{3,6,9}};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="determinante-matriz">
	<title>Cálculo del determinante de una matriz</title>

	<para>Podemos calcular el determinante de una matriz con
	  <keycap>Determinant</keycap>:</para>

	<example>
	  <title>Cálculo del determinante de una matriz</title>
	  <screen>
<prompt>In> </prompt><userinput>Determinant({{1,2,3},{6,4,0},{0,2,-5}});</userinput>
<computeroutput>Out> 76;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="traza-matriz">
	<title>Cálculo de la traza de una matriz</title>

	<para>Podemos calcular la traza de una matriz con
	<keycap>Trace</keycap>:</para>
	<example>
	  <title>Cálculo de la traza de una matriz</title>
	  <screen>
<prompt>In> </prompt><userinput>Trace({{1,2,3},{6,4,0},{0,2,-5}});</userinput>
<computeroutput>Out> 0;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="matriz-inversa">
	<title>Cálculo de la matriz inversa</title>

	<para>Podemos calcular la matriz inversa con
	<keycap>Inverse</keycap>:</para>
	<example>
	  <title>Cálculo de la matriz inversa</title>
	  <screen>
<prompt>In> </prompt><userinput>Inverse({{0,1},{2,0}});</userinput>
<computeroutput>Out> {{0,1/2},{1,0}};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="polinomio-caracteristico">
	<title>Cálculo del polinomio característico</title>

	<para>Podemos calcular el polinomio característico con
	<keycap>CharacteristicEquation</keycap>:</para>
	<example>
	  <title>Cálculo del polinomio característico</title>
	  <screen>
<prompt>In> </prompt><userinput>a:={{1,2,3},{4,5,6},{6,7,8}};</userinput>
<computeroutput>Out> {{1,2,3},{4,5,6},{6,7,8}};</computeroutput>
<prompt>In> </prompt><userinput>CharacteristicEquation(a,x);</userinput>
<computeroutput>Out> (1-x)*(5-x)*(8-x)-42*(1-x)+84-8*(8-x)+72-18*(5-x);</computeroutput>
<prompt>In> </prompt><userinput>Expand(%,x);</userinput>
<computeroutput>Out> 14*x^2-x^3+15*x;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2>
	<title>Cálculo de los valores propios</title>

	<para>Podemos calcular los valores propios, raíces del
	  polinomio característico, con
	  <keycap>EigenValues</keycap>:</para>
	<example>
	  <title>Cálculo de los valores propios</title>
	  <screen>
<prompt>In> </prompt><userinput>a:={{1,2},{2,1}};</userinput>
<computeroutput>Out> {{1,2},{2,1}};</computeroutput>
<prompt>In> </prompt><userinput>EigenValues(a);</userinput>
<computeroutput>Out> {-1,3};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2>
	<title>Cálculo de los vectores propios</title>

	<para>Podemos calcular los vectores propios del  polinomio característico, con
	  <keycap>EigenVectors</keycap>:</para>
	<example>
	  <title>Cálculo de los vectores propios</title>
	  <screen>
<prompt>In> </prompt><userinput>a:={{1,2},{2,1}};</userinput>
<computeroutput>Out> {{1,2},{2,1};</computeroutput>
<prompt>In> </prompt><userinput>vp=EigenValues(a);</userinput>
<computeroutput>Out> {-1,3};</computeroutput>
<prompt>In> </prompt><userinput>EigenVectors(a,vp);</userinput>
<computeroutput>Out> {{-k2,k2},{k2,k2}};</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

    </sect1>

    <sect1 id="operaciones-polinomios">
      <title>Operaciones sobre polinomios</title>

      <sect2 id="simplificacion">
	<title>Simplificación de expresiones</title>

	<para><acronym>YACAS</acronym> considerará como polinomios
	todas aquellas expresiones en las que haya variables
	  libres. Todas estas expresiones las podemos simplificar con
	  <keycap>Simplify</keycap>:</para>
	<example>
	  <title>Uso de <keycap>Simplify</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>Simplify(2*x^2-3*x+3*x^2-1);</userinput>
<computeroutput>Out> 5*x^2-3*x-1;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="expandir-polinomio">
	<title>Expandir un polinomio</title>

	<para>Para expandir un polinomio podemos utilizar
	<keycap>Expand</keycap>:</para>
	<example>
	  <title>Uso de <keycap>Expand</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>Expand((1+x-y)^2,x);</userinput>
<computeroutput>Out> x^2+2*(1-y)*x+(1-y)^2;</computeroutput>
<prompt>In> </prompt><userinput>Expand((1+x-y)^2,y);</userinput>
<computeroutput>Out> y^2+ -2*(x+1)*y+(x+1)^2;</computeroutput>
<prompt>In> </prompt><userinput>Expand((1+x-y)^2,{x,y});</userinput>
<computeroutput>Out> x^2+(-2*y+2)*x+y^2-2*y+1;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
	<para>También podemos expandir un polinomio con
	  <keycap>ExpandBrackets</keycap>. La diferencia entre
	  <keycap>ExpandBrackets</keycap> y <keycap>Expand</keycap> es
	  que el primero intentará eliminar todos los parentesis, no
	  hará falta el indicarle en una lista todas las variables
	  sobre las que tendrá que realizar la expansión:</para>
	<example>
	  <title>Uso de <keycap>ExpandBrackets</keycap></title>
	  <screen>
<prompt>In> </prompt><userinput>ExpandBrackets((a-x)*(b-x));</userinput>
<computeroutput>Out> a*b-x*b+x^2-a*x;;</computeroutput>
<prompt>In></prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="grado-polinomio">
	<title>Grado de un polinomio</title>

	<para>Podemos calcular el grado de un polinomio con
	<keycap>Degree</keycap>. Esta función además nos permite
	calcular el grado de una expresión como polinomio en una de
	sus variables:</para>
	<example>
	  <title>Cálculo del grado de un polinomio</title>
	  <screen>
<prompt>In> </prompt><userinput>expr:=x^2-3*x+2;</userinput>
<computeroutput>Out> x^2-3*x+2;</computeroutput>
<prompt>In> </prompt><userinput>Degree(expr);</userinput>
<computeroutput>Out> 2;</computeroutput>
<prompt>In> </prompt><userinput>expr:=a*x+a^2*x^3;</userinput>
<computeroutput>Out> a*x+a^2*x^3;</computeroutput>
<prompt>In> </prompt><userinput>Degree(expr,x);</userinput>
<computeroutput>Out> 3;</computeroutput>
<prompt>In> </prompt><userinput>Degree(expr,a);</userinput>
<computeroutput>Out> 2;</computeroutput>
<prompt>In> </prompt>
	  </screen>
	</example>
      </sect2>

      <sect2 id="division-polinomios">
	<title>División de polinomios</title>

	<para>Podemos dividir polinomios con las funciones
	  <keycap>Div</keycap> y <keycap>Mod</keycap> (<xref
	  linkend="mod-div">). En lugar de utilizar números enteros
	  como argumentos tendremos que utilizar polinomios.</para>
      </sect2>

    </sect1>

    <sect1 id="ejercicios-operadores">
      <title>Ejercicios</title>

      <orderedlist>
	<listitem>
	  <para>Expresar el número 123456789 en:</para>
	  <itemizedlist>
	    <listitem>
	      <para>Base dos (binario).</para>
	    </listitem>
	    <listitem>
	      <para>Base ocho (octal).</para>
	    </listitem>
	    <listitem>
	      <para>Base dieciseis (hexadecimal).</para>
	    </listitem>
	  </itemizedlist>
	</listitem>
	<listitem>
	  <para>Elige varios números y factorizalos.</para>
	</listitem>
	<listitem>
	  <para>Crea varias listas:</para>
	  <itemizedlist>
	    <listitem>
	      <para>Una con los primeros diez números pares.</para>
	    </listitem>
	    <listitem>
	      <para>Otra con los primeros diez números impares.</para>
	    </listitem>
	    <listitem>
	      <para>Otra con los primeros diez números primos.</para>
	    </listitem>
	  </itemizedlist>
	  <para>Utilizando las operaciones sobre listas,
	  calcula:</para>
	  <itemizedlist>
	    <listitem>
	      <para>Las contatenaciones de las tres listas.</para>
	    </listitem>
	    <listitem>
	      <para>Las uniones de las tres listas.</para>
	    </listitem>
	    <listitem>
	      <para>Las intersecciones de las listas dos a dos.</para>
	    </listitem>
	  </itemizedlist>
	</listitem>
	<listitem>
	  <para>Crear una lista con valores numéricos y ordenarla
	  creciente y decrecientemente.</para>
	</listitem>
	<listitem>
	  <para>Calcular el producto vectorial y escalar de dos
	  vectores cualesquiera de dimensión tres. Normalizar el
	  producto vectorial.</para>
	</listitem>
	<listitem>
	  <para>Calcular el valor de la función Seno en todos los
	  valores que van desde el uno hasta el diez y que distan entre
	  sí 0.1.</para>
	  <tip>
	    <para>Utilizar <keycap>Table</keycap>.</para>
	  </tip>
	</listitem>
	<listitem>
	  <para>En la lista <keycap>{a,b,c,d,E,f,g}</keycap> reemplaza
	  la letra mayúscula por su equivalente minúscula.</para>
	</listitem>
	<listitem>
	  <para>Crear una matriz cuadrada de orden 3 en la que cada
	  fila sea uno de los vectores de la base canónica.</para>
	</listitem>
	<listitem>
	  <para>Dada la lista
	  <keycap>{2,a*b,{2,3},3/5,I,Pi,3.7,{{1,2},{3,6}},Pi*I}</keycap>
	  determinar que elementos son:</para>
	  <itemizedlist>
	    <listitem>
	      <para>Números enteros.</para>
	    </listitem>
	    <listitem>
	      <para>Números racionales.</para>
	    </listitem>
	    <listitem>
	      <para>Números complejos.</para>
	    </listitem>
	    <listitem>
	      <para>Matrices.</para>
	    </listitem>
	    <listitem>
	      <para>Atomos.</para>
	    </listitem>
	  </itemizedlist>
	  <tip>
	    <para>Utilizar <keycap>Select</keycap>,
	      <keycap>IsInteger</keycap>, <keycap>IsRational</keycap>,
	      <keycap>IsComplex</keycap>, <keycap>IsMatrix</keycap> y
	      <keycap>IsAtom</keycap>.</para>
	  </tip>
	</listitem>
	<listitem>
	  <para>Calcular el cociente y el resto al dividir el
	    polinomio <keycap>3*x^5-3*x^2+2*x+1</keycap> por el
	    polinomio <keycap>x+Pi</keycap>. Una vez hecho comprobar
	    que se han hecho bien las divisiones.</para>
	  <tip>
	    <para>Utilizar variables para almacenar dividendo,
	    divisor, cociente y resto. Para comprobar utilizar que
	    dividendo es igual a divisor por cociente más
	    resto. Trabajar con expresiones simplificadas.</para>
	  </tip>
	</listitem>
      </orderedlist>
    </sect1>

</chapter>

<!-- Local Variables: -->
<!-- sgml-parent-document: "Yacas.sgml" -->
<!-- End: -->