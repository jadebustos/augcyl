<?xml version='1.0' encoding='utf-8'?>
  <chapter>
    <title>Software libre</title>
    <sect1>
      <title>&iquest;Qu&eacute; es?</title>
      <sect2>
	<title>Software propietario</title>
	<para>
	  Antes de entrar a definir el software libre, veamos algunas
	  caracter&iacute;sticas del software propietario mediante un
	  ejemplo.
	</para>
	<para>
	  Imaginad que vais a comprar un coche y las condiciones
	  de compra son:
        </para>
	<orderedlist>
	  <listitem>
	    <para>
	      Ud. s&oacute;lo puede circular con su coche por la provincia en
              la que reside. Si quisiera circular por otra provincia
              diferente necesitar&iacute;a pagar m&aacute;s dinero en concepto de
              licencia.
            </para>
	  </listitem>
	  <listitem>
	    <para>
              No podr&aacute; ceder ni alquilar su coche.
            </para>
	  </listitem>
	  <listitem>
	    <para>
	      No podr&aacute; modificarlo de ninguna manera, no podr&aacute; ponerle
	      otro radio-cassette, colgarle unos dados del retrovisor,
	      cambiarle los neum&aacute;ticos, ... Para hacerlo tendr&aacute; que
	      solicitarlo al vendedor y obviamente le cobrar&aacute;n por
	      ello, y al s&oacute;lo poder hacer las modificaciones el
	      vendedor &iquest;se imagina c&oacute;mo ser&aacute;n las tarifas?
            </para>
	  </listitem>
	  <listitem>
	    <para>
	      No podr&aacute; abrirlo/desmontarlo para estudiar su
	      funcionamiento.
            </para>
	  </listitem>
	</orderedlist>

	<para>
          &iquest;Comprar&iacute;a un coche en estas condiciones? Seguro que
          no. Entonces, &iquest;cu&aacute;l es la raz&oacute;n de comprar software
          propietario bajo unas condiciones similares?
	</para>
	<para>
	  Cuando compra un software propietario, si se molesta en leer
          la licencia que lo acompa&ntilde;a, ver&aacute; que:
       </para>
	<orderedlist>
	  <listitem>
	    <para>
              S&oacute;lo podr&aacute; instalar el software en un determinado n&uacute;mero
              de equipos, requiriendo el pago adicional, en concepto
              de licencias, si quisiera instalarlo en
              m&aacute;s equipos.
            </para>
	  </listitem>
	  <listitem>
	    <para>
              Ud. no puede ceder ni alquilar el software que acaba de
              comprar.
            </para>
	  </listitem>
	  <listitem>
	    <para>
	      No puede modificarlo de ninguna manera. El &uacute;nico que
	      puede hacerlo es el desarrollador y en las condiciones
	      que considere oportunas (y siempre y cuando le salga
	      rentable).
            </para>
	  </listitem>
	  <listitem>
	    <para>
              No podr&aacute; realizar ingenier&iacute;a inversa para estudiar su
	      comportamiento.
            </para>
	  </listitem>
	</orderedlist>
      </sect2>
      <sect2>
	<title>Definici&oacute;n de Software Libre</title>
	<para>
	  El "Software Libre" es un asunto de libertad, no de
	  precio. Para entender el concepto, debes pensar en "libre"
	  como en "libertad de expresi&oacute;n", no como en "barra libre"
	  [N. del T.: en ingl&eacute;s una misma palabra (free) significa
	  tanto libre como gratis, lo que ha dado lugar a cierta
	  confusi&oacute;n].
	</para>
	<para>
	  "Software Libre" se refiere a la libertad de los usuarios
	  para ejecutar, copiar, distribuir, estudiar, cambiar y
	  mejorar el software. De modo m&aacute;s preciso, se refiere a
	  cuatro libertades de los usuarios del software:
	</para>
	<itemizedlist>
	  <listitem>
	    <para>La libertad de usar el programa, con cualquier
	    prop&oacute;sito (libertad 0).</para>
	  </listitem>
	  <listitem>
	    <para>
	      La libertad de estudiar c&oacute;mo funciona el programa, y
	      adaptarlo a tus necesidades (libertad 1). El acceso al
	      c&oacute;digo fuente es una condici&oacute;n previa para esto.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      La libertad de distribuir copias, con lo que puedes
	      ayudar a tu vecino (libertad 2).
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      La libertad de mejorar el programa y hacer p&uacute;blicas las
	      mejoras a los dem&aacute;s, de modo que toda la comunidad se
	      beneficie. (libertad 3). El acceso al c&oacute;digo fuente es
	      un requisito previo para esto.
	    </para>
	  </listitem>
	</itemizedlist>
	<para>
	  Un programa es software libre si los usuarios tienen todas
	  estas libertades. As&iacute; pues, deber&iacute;as tener la libertad de
	  distribuir copias, sea con o sin modificaciones, sea gratis
	  o cobrando una cantidad por la distribuci&oacute;n, a cualquier
	  persona en cualquier lugar. El ser libre de hacer esto
	  significa (entre otras cosas) que no tienes que pedir o
	  pagar permisos.
	</para>
	<para>
	  Tambi&eacute;n deber&iacute;as tener la libertad de hacer modificaciones y
	  utilizarlas de manera privada en tu trabajo u ocio, sin ni
	  siquiera tener que anunciar que dichas modificaciones
	  existen. Si publicas tus cambios, no tienes por qu&eacute; avisar a
	  nadie, ni de ninguna manera en particular.
	</para>
	<para>
	  La libertad para usar un programa significa la libertad para
	  cualquier persona u organizaci&oacute;n de usarlo en cualquier tipo
	  de sistema inform&aacute;tico, para cualquier clase de trabajo, y
	  sin tener obligaci&oacute;n de comunic&aacute;rselo al desarrollador ni a
	  ninguna otra entidad espec&iacute;fica.
	</para>
	<para>
	  La libertad de distribuir copias debe incluir tanto las
	  formas binarias o ejecutables del programa como su c&oacute;digo
	  fuente, sean versiones modificadas o sin modificar
	  (distribuir programas de modo ejecutable es necesario para
	  que los sistemas operativos libres sean f&aacute;ciles de
	  instalar). Est&aacute; bien si no hay manera de producir un binario
	  o ejecutable de un programa concreto (ya que algunos
	  lenguajes no tienen esta capacidad), pero debes tener la
	  libertad de distribuir estos formatos si encontraras o
	  desarrollaras la manera de crearlos.
	</para>
	<para>
	  Para que las libertades de hacer modificaciones y de
	  publicar versiones mejoradas tengan sentido, debes tener
	  acceso al c&oacute;digo fuente del programa. Por lo tanto, la
	  posibilidad de acceder al c&oacute;digo fuente es una condici&oacute;n
	  necesaria para el software libre.
	</para>
	<para>
	  Para que estas libertades sean reales, deben ser
	  irrevocables mientras no hagas nada incorrecto; si el
	  desarrollador del software tiene el poder de revocar la
	  licencia aunque no le hayas dado motivos, el software no es
	  libre.
	</para>
	<para>
	  As&iacute; pues, quiz&aacute;s hayas pagado para obtener copias de
	  software GNU, o tal vez las hayas obtenido sin ning&uacute;n
	  coste. Pero independientemente de c&oacute;mo hayas conseguido tus
	  copias, siempre tienes la libertad de copiar y modificar el
	  software, e incluso de vender copias.
	</para>
	<para>
	  "Software libre" no significa "no comercial". Un programa
	  libre debe estar disponible para uso comercial, desarrollo
	  comercial y distribuci&oacute;n comercial. El desarrollo comercial
	  del software libre ha dejado de ser inusual; el software
	  comercial libre es muy importante.
	</para>
	<para>
	  A veces las normas de control de exportaci&oacute;n del gobierno y
	  las sanciones mercantiles pueden restringir tu libertad de
	  distribuir copias de los programas a nivel
	  internacional. Los desarrolladores de software no tienen el
	  poder de eliminar o sobrepasar estas restricciones, pero lo
	  que pueden y deben hacer es rehusar el imponerlas como
	  condiciones de uso del programa. De esta manera, las
	  restricciones no afectar&aacute;n a actividades y gente fuera de
	  las jurisdicciones de estos gobiernos.
	</para>
	<para>
	  Por &uacute;ltimo, f&iacute;jate en que los criterios establecidos en esta
	  definici&oacute;n de software libre requieren pensarse
	  cuidadosamente para interpretarlos. Para decidir si una
	  licencia de software concreta es una licencia de software
	  libre, lo juzgamos bas&aacute;ndonos en estos criterios para
	  determinar si tanto su esp&iacute;ritu como su letra en particular
	  los cumplen. Si una licencia incluye restricciones
	  contrarias a nuestra &eacute;tica, la rechazamos, aun cuando no
	  hubi&eacute;ramos previsto el problema en estos criterios. A veces
	  un requisito de una licencia plantea una situaci&oacute;n que
	  necesita de una reflexi&oacute;n minuciosa, e incluso
	  conversaciones con un abogado, antes de que se pueda decidir
	  si la exigencia es aceptable. Cuando llegamos a una
	  conclusi&oacute;n, a veces actualizamos estos criterios para que
	  sea m&aacute;s f&aacute;cil ver por qu&eacute; ciertas licencias se pueden
	  calificar o no como de software libre.
	</para>
	<para>
	  Por lo general, para decidir si un determinado software es
	  libre, puedes hacerte las siguientes preguntas:
	</para>
	<orderedlist>
	  <listitem>
	    <para>&iquest;Te dan las fuentes del programa?</para>
	  </listitem>
	  <listitem>
	    <para>&iquest;Puedes modificar esas fuentes?</para>
	  </listitem>
	  <listitem>
	    <para>&iquest;Puedes distribuir lo que modifiques?</para>
	  </listitem>
	  <listitem>
	    <para>&iquest;Puedes vender esas modificaciones al precio que
	    quieras?</para>
	  </listitem>
	  <listitem>
	    <para> &iquest;Debes a&ntilde;adir las fuentes, obligatoriamente, al
	    distribuir?</para>
	  </listitem>
	  </orderedlist>
	<para>
	  Seg&uacute;n la FSF si la respuesta a las cuatro primeras es
	  afirmativa el programa es software libre, si adem&aacute;s la
	  quinta es tambi&eacute;n positiva, entonces, ser&aacute; libre y con
	  "copyleft".
	</para>
      </sect2>
      <sect2>
	<title>&iquest;Porque tanta oposici&oacute;n?</title>
	<para>
	  A muchas empresas de software propietario no les interesa el
	  software libre por motivos claros y sencillos:
	</para>
	<itemizedlist>
	  <listitem>
	    <para>
	      Hay muchas empresas que se dedican a vender software de
	      mala calidad. La disponibilidad del c&oacute;digo fuente dar&iacute;a
	      a conocer, sin ninguna duda, la falta de profesionalidad
	      de dichas empresas.
            </para>
	  </listitem>
	  <listitem>
	    <para>
              Habr&iacute;a una mayor competencia y las empresas que m&aacute;s
              &eacute;xito tendr&iacute;an ser&iacute;an aquellas que proporcionen el mejor
              servicio, y no aquellas que se aprovechan de su posici&oacute;n
              de privilegio.
            </para>
	  </listitem>
	  <listitem>
	    <para>
	      La utilizaci&oacute;n de t&eacute;cnicas "lock in" (de dependencia) es
	      pr&aacute;cticamente imposible en software libre, lo que quiere
	      decir, que si no te dan un buen servicio, puedes coger
	      el software e irte con otra empresa que trabaje mejor, o
	      incluso mejorarlo y adaptarlo por ti mismo.
	    </para>
	    <para>
              Aprovechando una posici&oacute;n predominante en el mercado y
              mediante el uso de formatos de almacenamiento de
              ficheros y protocolos de comunicaci&oacute;n propietarios
              (informaci&oacute;n) se puede impedir que otras entidades
              puedan dar los mismos servicios y mantener as&iacute; al
              usuario esclavo.
            </para>
	  </listitem>
	</itemizedlist>
      </sect2>
      <sect2>
	<title>Control y seguridad</title>
	<para>
	  Cuando adquirimos un software propietario rara vez se nos
	  suministra el c&oacute;digo fuente. Sin embargo, la mayor&iacute;a de la
	  gente no le da importancia a este hecho ya que, como ellos
	  dicen, "&iquest;Y qu&eacute; me importa a m&iacute; que me den el c&oacute;digo fuente
	  si no tengo los conocimientos necesarios para leerlo?".
	</para>
	<para>
	  Sin embargo, la &uacute;nica forma de poder fiarnos de la seguridad
	  de un programa inform&aacute;tico es tener a nuestra disposici&oacute;n el
	  c&oacute;digo fuente, ya que de esta manera podemos ver c&oacute;mo ha
	  sido programado y si lo ha sido de forma correcta. Adem&aacute;s,
	  tambi&eacute;n podremos comprobar que en dicho programa no hay:
	</para>
	<itemizedlist>
	  <listitem>
	    <para>
	      Puertas traseras: No es necesario que el desarrollador
	      las incluya. Hay veces en las que un intruso introduce
	      una puerta trasera sin el conocimiento del
	      desarrollador; otras veces la competencia puede pagar
	      a un programador descontento para que introduzca esa
	      puerta trasera.
	      </para>
	  </listitem>
	  <listitem>
	    <para>
	      Funcionalidades no documentadas: Un programa puede
	      realizar ciertas tareas de las que no somos
	      conscientes. Por ejemplo, un programa para cifrado de
	      correo electr&oacute;nico tendr&aacute; acceso a nuestras claves y
	      podr&iacute;a haber sido programado para mandar esas claves a
	      una determinada persona. O bien podr&iacute;a incluir
	      informaci&oacute;n sobre nosotros y nuestras claves en las
	      firmas digitales que utilicemos mediante la inclusi&oacute;n de
	      canales subliminales.
	    </para>
	  </listitem>
	</itemizedlist>
	<para>
	  La &uacute;nica forma de detectar todo esto es mediante la
	  disponibilidad del c&oacute;digo fuente, ya que encontrar un bug en
	  un programa de ordenador no es tan sencillo como se piensa,
	  a menos que se disponga del c&oacute;digo fuente. La disponibilidad
	  del c&oacute;digo fuente nos da m&aacute;s seguridad en el sentido de
	  transparencia: como el c&oacute;digo fuente est&aacute; disponible se
	  puede auditar y comprobar as&iacute; que est&aacute; libre de puertas
	  traseras y/o funcionalidades no documentadas, ya que en caso
	  de tenerlas se descubrir&iacute;an, y su hallazgo ser&iacute;a una
	  aut&eacute;ntica verg&uuml;enza para la empresa que lo vende, pudi&eacute;ndola
	  llevar a la ruina.
	</para>
	<sect3>
	  <title>Est&aacute;ndares abiertos</title>
	  <para>
	    Para conservar la libertad de la informaci&oacute;n, es
	    imprescindible el uso de est&aacute;ndares abiertos. Esto es,
	    est&aacute;ndares establecidos por entidades internacionales e
	    independientes de las empresas particulares
	    (ISO, IEEE, ...).
	  </para>
	  <para>
	    De otra manera depender&iacute;amos de los intereses de la
	    empresa que comercializa el software. Siendo este el &uacute;nico
	    que puede leer nuestra informaci&oacute;n y no siendo posible que
	    otras entidades escriban software alternativo, estar&iacute;amos
	    vendidos.
	  </para>
	</sect3>
      </sect2>
    </sect1>
    <sect1>
      <title>&iquest;C&oacute;mo funciona?</title>
      <para>
	El &eacute;nfasis del sistema esta en la colaboraci&oacute;n. Se trata de
	una comunidad de usuarios/desarrolladores unida por un fin
	com&uacute;n. En el fondo todos son ego&iacute;stas, trabajan en el
	proyecto porque lo usan y les interesa que funcione lo mejor
	posible y solucione sus propios problemas. De esta manera,
	todos se benefician.
      </para>
      <sect2>
	<title>Historia de un proyecto</title>
	<orderedlist>
	  <listitem>
	    <para>
	      Alguna persona o entidad comienza un proyecto para
	      satisfacer una necesidad propia. Por lo general no
	      tienen que empezar de cero ni hacer todo el trabajo, hay
	      ya otros proyectos que hacen cosas similares y
	      bibliotecas de funciones que hacen parte del trabajo. No
	      tienen mas que coger lo que les interese de entre todo
	      el software disponible a nivel mundial y mirar como se
	      han resuelto otros problemas similares.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Cuando el proyecto se hace publico, otra gente puede
	      utilizarlo, encontrar deficiencias y corregirlas.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Cuando se han hecho modificaciones, se tratan de
	      integrar con el proyecto original, y son los autores
	      originales los que deciden si los cambios se aceptan o
	      no.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Si se aceptan los cambios, el proyecto mejora y la
	      historia se repite.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      En el caso de que los cambios sean rechazados, el autor
	      de estos puede o bien mantener los cambios
	      independientemente del proyecto original, o iniciar un
	      nuevo proyecto (bifurcaci&oacute;n/fork).
	    </para>
	  </listitem>
	</orderedlist>
      </sect2>
      <sect2>
	<title>Modelos de desarrollo</title>
	<para>
	</para>
	<sect3>
	  <title>Catedral</title>
	  <para>
	    Es el modelo tradicional de desarrollo de software. De
	    este tipo son las t&eacute;cnicas de desarrollo que se estudian
	    en las asignaturas de Ingenier&iacute;a del Software y se usan en
	    las empresas.
	  </para>
	  <para>Sus principales caracter&iacute;sticas son:</para>
	  <itemizedlist>
	    <listitem>
	      <para>
		Paso a paso, avances peque&ntilde;os
	      </para>
	    </listitem>
	    <listitem>
	      <para>		
		Siguiendo un dise&ntilde;o de un arquitecto magistral
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Gran secreto
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Grandes recursos
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Solo se deja entrar a los feligreses una vez terminada
	      </para>
	    </listitem>
	  </itemizedlist>
	</sect3>
	<sect3>
	  <title>Bazar</title>
	  <para>
	    Es el modelo mas habitual en software libre. A menudo es
	    considerado inviable por los expertos en ingenier&iacute;a del
	    software, pero el hecho es que funciona.
	  </para>
	  <para>Sus principales caracter&iacute;sticas son:</para>
	  <itemizedlist>
	    <listitem>
	      <para>
		Gran n&uacute;mero de desarrolladores
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Diferente lugar geogr&aacute;fico
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Voluntarios
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Diferente Idioma (Ingles LinguaFranca)</para>
	    </listitem>
	    <listitem>
	      <para>
		No hay un dise&ntilde;o escrito sino un problema por resolver	
	      </para>
	    </listitem>
	  </itemizedlist>
	  <para>
	    Bajo este modelo se ha producido software de gran calidad, como:
	  </para>
	  <itemizedlist>
	    <listitem>
	      <para>
		El n&uacute;cleo Linux
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Apache
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Samba
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		The Gimp
	      </para>
	    </listitem>
	  </itemizedlist>
	</sect3>
      </sect2>
    </sect1>
    <sect1>
      <title>Ventajas</title>
      <itemizedlist>
	<listitem>
	  <para>
	    Internacionalizaci&oacute;n: dado el car&aacute;cter global de los
	    proyectos, siempre hay quien haga las traducciones.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Reutilizaci&oacute;n de c&oacute;digo e ideas: siendo el c&oacute;digo libre,
	    cualquiera puede coger partes de otros proyectos o ver
	    como han resulto otros los distintos problemas.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Reutilizaci&oacute;n de componentes: dado el car&aacute;cter
	    cooperativo, los proyectos tratan de producir componentes
	    reutilizables como puede ser aspell, un corrector
	    ortogr&aacute;fico de gran calidad. El equipo de desarrollo de
	    aspell hace el motor de correcci&oacute;n ortogr&aacute;fica, y todos
	    los dem&aacute;s proyectos pueden beneficiarse de ello. Y los
	    usuarios solo tienen que preocuparse de instalar
	    diccionarios una vez para todos los programas.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Rapidez de desarrollo: son decenas, cientos y a veces
	    miles las personas que colaboran en determinadas fases del
	    desarrollo.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Robustez: las extensivas pruebas de funcionamiento entre
	    los usuarios realimentan a los desarrolladores en ciclos
	    incre&iacute;blemente cortos.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Extensibilidad: cualquiera puede desarrollar nuevas
	    funcionalidades. La calidad de su desarrollo y su
	    aceptaci&oacute;n por parte de los usuarios valida la
	    incorporaci&oacute;n del nuevo c&oacute;digo a la distribuci&oacute;n oficial.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Soporte t&eacute;cnico:
	  </para>
	  <itemizedlist>
	    <listitem>
	      <para>
		GNU/Linux cuenta con el mayor soporte t&eacute;cnico del
		mundo. La comunidad de usuarios, que va desde meros
		aficionados y estudiantes a curtid&iacute;simos profesionales
		y consultores del mundo UNIX, tiene una predisposici&oacute;n
		a la colaboraci&oacute;n, especialmente a trav&eacute;s de los
		diferentes medios que ofrece Internet, que permite
		obtener tiempos de respuesta a cuestiones de tipo
		servicio t&eacute;cnico muy superiores a los servicios
		convencionales.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Soporte t&eacute;cnico a trav&eacute;s de canales comerciales en
		crecimiento explosivo: aut&oacute;nomos, pymes y grandes
		empresas del entorno GNU/Linux y &uacute;ltimamente compa&ntilde;&iacute;as
		como HP e IBM disponen de programas de servicio
		t&eacute;cnico 24h, 365 d&iacute;as al a&ntilde;o.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		La disposici&oacute;n del c&oacute;digo fuente permite a la empresa
		atacar los hipot&eacute;ticos problemas con sus propios
		recursos, bien sea solucionando 'bugs' o bien
		a&ntilde;adiendo o extendiendo funcionalidades de las
		aplicaciones. Esto no es posible en entornos
		comerciales sin una penalizaci&oacute;n temporal o econ&oacute;mica,
		o a&uacute;n ambos, normalmente inabordable.
	      </para>
	    </listitem>
	  </itemizedlist>
	</listitem>
      </itemizedlist>
    </sect1>
    <sect1>
      <title>Mitos</title>
      <itemizedlist>
	<listitem>
	  <para>
	    Dado que cualquiera puede modificarlo y redistribuirlo, al
	    final hay un mont&oacute;n de versiones distintas y es todo un
	    caos.
	  </para>
	  <para>
	    Hacer muchas variantes del mismo software, no es rentable,
	    supone mucha duplicaci&oacute;n de esfuerzos y confusi&oacute;n. Eso es
	    precisamente el tipo de cosa que se trata de evitar desde
	    el software libre. Nadie en su sano juicio bifurca un
	    proyecto sin una buena raz&oacute;n. Y en cualquier caso siempre
	    se puede coger el software directamente del equipo de
	    desarrollo oficial.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Si no tienes conocimientos suficientes, ni tiempo muchas
	    veces, &iquest;de que te sirve el c&oacute;digo fuente?
	  </para>
	  <para>
	    Hay gente que s&iacute; tiene el conocimiento y el tiempo, y
	    cuando se descubre alg&uacute;n fallo salta a la luz p&uacute;blica
	    enseguida. De esta forma, todos los usuarios que lo
	    utilizan son conscientes de esos fallos de seguridad y
	    pueden obrar en consecuencia. En materia de seguridad, la
	    falta de transparencia s&oacute;lo perjudica a los usuarios,
	    porque puede resultar mucho m&aacute;s dif&iacute;cil descubrir las
	    vulnerabilidades del software que est&eacute;n utilizando.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Al estar el c&oacute;digo fuente disponible los intrusos tienen
	    ventajas, ya que pueden descubrir antes los fallos y
	    aprovecharse de ellos.
	  </para>
	  <para>
	    Cierto, pero hay algo m&aacute;s sobre este tema, que desde los
	    sectores contrarios al software libre no se comenta. No
	    s&oacute;lo los intrusos los descubren, sino que tambi&eacute;n hay
	    gente dedicada a la "caza" de bugs que descubre los
	    fallos, los pone en conocimiento de los usuarios y los
	    arregla, con lo cual los usuarios pueden obrar en
	    consecuencia (por otro lado, al ser conscientes del fallo
	    de seguridad y gracias a la disponibilidad del c&oacute;digo
	    fuente, es posible que cualquier persona con los
	    conocimientos adecuados pueda arreglar el fallo y poner la
	    versi&oacute;n ya reparada a disposici&oacute;n de los usuarios). Con
	    software propietario, habr&iacute;a que esperar a que la empresa
	    sacara el parche o Service Pack correspondiente y no hay
	    que olvidar que esto lo har&aacute; cuando le salga
	    econ&oacute;micamente rentable. Generalmente se espera a tener
	    corregidos una determinada cantidad de errores y s&oacute;lo
	    entonces se libera el correspondiente Service Pack, en
	    lugar de solucionar los fallos cuando se detectan. De este
	    tipo de pol&iacute;ticas tambi&eacute;n salimos perjudicados los
	    usuarios.
	  </para>
	  <para>
	    Por otro lado, en el mundo propietario, cuando alguien
	    descubre un agujero de seguridad, puede explotarlo durante
	    mucho tiempo sin el conocimiento del afectado o el
	    productor del software. En software libre, se descubren
	    mas agujeros que salen pronto a la luz publica y son
	    tapados r&aacute;pidamente. En el peor de los casos no es mas que
	    un intercambio de ventajas.
	  </para>
	</listitem>
      </itemizedlist>
	</sect1>  
  </chapter>
  
  <!-- Local Variables: -->
  <!-- sgml-parent-document: "Introduccion.sgml" -->
  <!-- End: -->

