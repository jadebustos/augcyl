<?xml version='1.0' encoding='utf-8'?>
<chapter><title>Escritorio remoto</title>
<sect1><title>Escritorio remoto: X-Window </title>

<para>El sistema X-Window desde sus orígenes se diseñó con vistas a la transparencia de red: una aplicación se visualiza y maneja desde un terminal, pero puede estar ejecutándose en cualquier máquina de la red con la que haya conexión TCP/IP. En la terminología X-Window, el PC del usuario ejecuta el servidor X, mientras que las aplicaciones son los clientes: la idea es que las aplicaciones hacen peticiones al servidor del tipo dibuja este mapa de bits o notificamé determinados eventos. El servidor notifica a los clientes eventos como pulsaciones de teclas o eventos del ratón.</para>

<para>Para ejecutar una aplicación desde una máquina remota a la que nos hemos conectado por ejemplo a través de un telnet o un ssh, lo primero que hace falta es que esté definida la variable DISPLAY, que indica el servidor a utilizar. Así, un valor :0 indica usar el servidor local (si hubiera más de uno, se incrementaría el número); con el valor 192.168.7.10:0, indicaríamos que conecte con el servidor X de la máquina 192.168.7.10.</para>

<para>El siguiente requisito, es que si la conexión es vía red, tiene que estar abierto en el cortafuegos el puerto TCP del servidor X. Este puerto por defecto es 6000 para el primer servidor (:0) y se va incrementando conforme se ejecutan más servidores sobre una misma máquina.</para>

<para>Finalmente, el servidor X tiene que permitir que el cliente se conecte. Hay dos formas:</para>
<orderedlist>
<listitem>
<para>método poco sutil, xhost. Ejecutando xhost desde nuestro servidor X damos permiso para que desde las Ips que indiquemos se puedan conectar a nuestro servidor. Así, con xhost +192.168.7.1 permitiríamos conectar desde esa IP. Con xhost + permitiríamos conectar desde cualquier IP. Ojo, no conceder este permiso con ligereza: un cliente puede espiar eventos de teclado, enviar eventos de teclado (nada divertido si tenemos una terminal abierta y envían un comando destructivo seguido de l evento de la tecla enter) o cuanto menos molestar bastante. A esto hay que añadir que al abrir una IP se abren a todos los posibles usuarios de la máquina si es multiusuario o al posible malware que tuviera instalado; así mismo no hay que olvidar la posibilidad del IP Spoofing.</para>
</listitem>
<listitem>
<para>método más adecuado, xauth. Para que el cliente pueda conectarse, salvo que se haya permitido explícitamente utilizando xhost como se describe en el método anterior, tiene que utilizar una "cookie" que está almacenada en la cuenta de usuario del servidor que ejecuta el servidor X-Window, en el fichero que indique la variable de entorno XAUTHORITY. Este es el motivo por el que en algunas distribuciones al cambiar de usuario, incluso al cambiar a root, no permite ejecutar aplicaciones X: la variable de entorno ya no apunta a este fichero, por lo que no se envía la cookie. Hay distribuciones en las que sí funciona al pasar a root, porque sudo, su o la orden que hayamos ejecutado para cambiar de usuario usa un módulo PAM para que al establecer una nueva sesión de usuario se copie la cookie. Como comentario adicional, con xhost es posible dar permiso para que abra conexiones cualquier cliente local con independencia de su usuario, pero no clientes remotos, mediante xhost +local:. Este mecanismo se apoya en que cuando cliente (aplicación) y servidor (terminal X) están en la misma máquina, no usan el socket TCP sino un socket Unix, que es sólo accesible localmente. De hecho si sólo vamos a permitir conexiones locales, es buena idea ejecutar el servidor X con la opción -nolisten tcp; es lo que hacen por defecto distribuciones como Ubuntu.</para>
</listitem>
</orderedlist>

<para>Mediante la herramienta xauth, podemos leer la cookie en el servidor X; luego también mediante la herramienta xauth, en la máquina remota, podemos añadir la cookie.</para>

<para>En realidad, el método recomendado para ejecutar aplicaciones remotas es conectarnos con ssh con la opción -X o con la opción -Y<footnote>
<para>La opción -X ejecuta usando un modo restringido de seguridad, que impide por ejemplo acceder a determinadas propiedades y que puede impedir que algunas aplicaciones de escritorio se ejecuten. Las restricciones de seguridad que impone -X tampoco son demasiado efectivas por sí solas. Si al usar ssh con -X o con -Y, en la máquina remota no aparece definida la variable de entorno DISPLAY y por lo tanto no funcionan las aplicaciones X, posiblemente se deba a que en la máquina remota no está instalado xauth.</para>
</footnote> (si recibiéramos algún -Y estamos sujetos a algunas restricciones de seguridad, a decir verdad no totalmente efectivas). Al ejecutar aplicaciones a través de SSH se usa para cada conexión un túnel encapsulado dentro de la conexión SSH, con todas las ventajas que implica: seguridad, al estar cifrado y protegido contra modificación y versatibilidad, pues no hay que abrir ningún puerto en el cortafuegos ni hay problema si nuestra máquina está tras una ADSL con NAT. La idea en que se basa es utilizar un proxy: crea un servidor X en la máquina remota y redirige todo lo que recibe por medio del túnel SSH al servidor X real que tenemos en nuestra máquina local. Gracias a este sistema funciona incluso aunque el servidor X se ejecute con la opción -nolisten tcp, pues la comunicación es local gracias al túnel.</para>

<para>Muchas veces la forma de ejecutar las aplicaciones remotas no es ejecutando aplicaciones sueltas, en nuestro escritorio local, sino ejecutando entero el escritorio remoto. Es decir, nos sale la pantalla de GDM o KDM que nos pide nuestro usuario y contraseña y a continuación entramos en un escritorio Gnome o KDE, pero que en realidad no es el de nuestra máquina, sino el de una máquina remota. Esta funcionalidad se apoya en el protocolo XDMCP, que por razones de seguridad suele estar desactivado (lo implementa el propio GDM/KDM). El protocolo usa el puerto UDP 177, pero sólo inicialmente; para mostrar la propia pantalla de Login ya recurre a la habitual conexión TCP con el puerto 6000, si bien automáticamente configura todo, incluyendo el fichero con la cookie, para que el usuario no tenga que hacer nada especial. Se puede establecer una conexión con un servidor XDMCP bien directamente desde el gdm de la máquina local, o pasando opciones como -query (ver man Xserver) a un servidor X ejecutado en otra consola, por ejemplo <userinput>X :1 -query 192.168.10.7</userinput> o bien a un servidor ejecutando en una ventana, como xnest o el más moderno Xephyr . En cualquier caso usar XDMCP es inseguro, habría que tener un túnel que proteja tanto la conexión UDP con el servidor XDMCP, como las conexiones TCP de los clientes X-Window. Una opción más sencilla de lograr una sesión sin perder seguridad, sobre todo teniendo en cuenta que openssh no permite túneles UDP, es olvidarse de XDMCP e invocar en la máquina remota vía SSH por ejemplo /etc/X11/Xsession<footnote>
<para>Por ejemplo, desde una consola se puede lanzar <userinput>startx /usr/bin/xterm -- :1</userinput> y luego desde ese terminal (que no debe cerrarse o de lo contrario se cerrará la sesión) ejecutar <userinput>ssh -Y user@host /etc/X11/Xsession</userinput>. Con Xephyr la idea sería primero crear una cookie de autenticación invocando xauth; en la subshell hay que ejecutar una orden tipo <userinput>add :1 . ad753146ead4c2e60031c60f22139da9f</userinput> (:1 sería el DISPLAY) y para grabar salir con exit. A continuación se puede lanzar el servidor, por ejemplo con <userinput>Xephyr :1 -auth .Xauthority &amp;</userinput>, finalmente se establece <userinput>export DISPLAY=:1</userinput> y se invoca ssh.</para>
</footnote> (teóricamente podría valer con ejecutar x-session-manager, pero suelen arrancarse aparte algunos demonios, como D-BUS).</para>

<para>Hay servidores X libres disponibles también para Windows: recomendamos <ulink url="http://x.cygwin.com/">http://x.cygwin.com/</ulink>. </para>

<para>X-Window es la tecnología pionera de escritorio remoto, pero con el tiempo han surgido otras como RFB (VNC), RDP, Citrix, Adaptive Internet Protocol (Sun), Tarantella, </para></sect1>
<sect1><title>Escritorio remoto: RFB (VNC)</title>

<para>VNC es un sistema que permite conectarse a un escritorio remoto. El servidor se ejecuta en el ordenador remoto a cuyo escritorio nos queremos conectar y el cliente en nuestra máquina. Toda la pantalla del escritorio se maneja dentro de una ventana, no es posible como con X-Window ejecutar cada aplicación en su ventana, como si fueran aplicaciones locales. Así mismo es un sistema mucho menos avanzado que X-Window, basado simplemente en un framebuffer, retransmitiendo los cuadros que cambian (en cambio en X-Window se almacena información en el servidor, de modo que no hay que retransmitirla cada vez que se muestra por pantalla: como muestra un botón: el protocolo baso X-Window, sin extensiones, tiene 160 tipos de peticiones, respuestas y eventos).</para>

<para>Si VNC es menos avanzado que X-Window, ¿por qué hay gente que usa VNC en lugar de X-Window?</para>
<orderedlist>
<listitem>
<para>conectividad: VNC funciona sobre cualquier escritorio, incluyendo Windows: las aplicaciones Windows no son clientes X-Window, por lo que no podemos esperar usarlas remotamente utilizando este sistema.</para>
</listitem>
<listitem>
<para>conexión sin estado: cuando iniciamos una sesión remota con X-Window, no podemos en un momento dado decir, vale, me voy a casa, apago el monitor y me conecto luego desde casa y tengo todo como lo dejé, con el OpenOffice abierto editando un fichero y el visor de PDF por la página 85. El motivo es que los clientes están ligados a esa conexión con el servidor y en el servidor hay información de estado: si cerramos el servidor mueren las aplicaciones. En cambio con VNC realmente funciona la analogía monitor, teclado y ratón remoto.</para>
</listitem>
<listitem>
<para>rendimiento aceptable en una conexión vía Internet. Este punto es desconcertante, porque por diseño X-Window es mucho más eficiente que VNC y debería ofrecer mejores resultados con menos ancho de banda. De hecho usando una red local con X-Window realmente las aplicaciones parecen locales. ¿Entonces que es lo que ocurre? El motivo es el round-trip. Conforme pasaban los años, los desarrolladores se despreocuparon más de la posibilidad de ejecutar las aplicaciones remotamente vía Internet, sobre todo en un punto: las aplicaciones e incluso los propios toolkits hacen muchas consultas al servidor X y esperan una respuesta, pese a que en general X-Window funciona asíncronamente. Estas peticiones-respuestas tardan en procesarse cuanto menos el tiempo de latencia de la red multiplicado por dos (uno para enviar, otro para recibir). En una aplicación que se ejecuta en local, la latencia es de 0,1 ms, por lo que aunque haya miles de round-trips el efecto es inapreciable. En una red local la latencia es de 1ms, todavía asumible. Pero si usamos por ejemplo una ADSL, ya encontraremos latencias de 50ms, en una línea serie 200ms y estos valores subirán aún más en conexiones GSM o por satélite. Afortunadamente hay una tecnología que trata de soluciones estos problemas, NX, de la que también hablaremos.</para>
</listitem>
<listitem>
<para>algunos programas como TightVNC (<ulink url="http://www.tightvnc.com/">www.tightvnc.com/</ulink>) soportan también transferencia de ficheros.</para>
</listitem>
<listitem>
<para>puede usarse para mostrar escritorio a otros usuarios o para solicitar asistencia; además de protegerse por contraseña se puede hacer que salga una ventana pidiendo autorización si de lo que se trata es de compartir escritorio.</para>
</listitem>
</orderedlist>

<para>VNC se ejecuta sobre una única conexión TCP, por lo que es muy fácil de securizar utilizando un túnel SSH, que es así mismo una solución interesante para permitir que los traajadores de una empresa puedan manejar en caso de necesidad su equipo de la oficina desde casa.</para>

<para>Tanto KDE como Gnome incluyen una opción de permitir administrar remotamente el equipo (en Gnome el paquete Vino, en KDE es krfb). Esta opción se implementa con VNC. También se implementa con VNC el "Apple Remote Desktop". Probablemente también se use en VMWare Server, que permite desde una consola VMWare acceder a máquinas virtuales ejecutándose en otra máquina.</para>

<para>A veces en lugar de VNC leeremos RFB. Es el nombre del protocolo: Remote Frame Buffer.</para>

<para>Relación de software que implementa VNC: <ulink url="http://en.wikipedia.org/wiki/Vnc">http://en.wikipedia.org/wiki/Vnc</ulink>. Como visores los más habituales son tighvnc y realvnc (este último de una empresa creada por los programadores originales, que ahora desarrollan una versión privativa además de la libre; las distribuciones suelen incluir este paquete como vnc a secas, sin el "real" en el nombre). Como servidores también estos, pero ya es más habitual usar el integrado en el escritorio, al permitir hacerlo funcionar en cualquier momento sobre un servidor X ya arrancado; en cambio en los otros el servidor VNC es también un servidor X-Window, de tal modo que primero hay que arrancar ese servidor VNC y desde otro servidor X ejecutar un cliente VNC para poder usar las aplicaciones. Este enfoque sigue siendo interesante cuando se quieren lanzar aplicaciones X-Window sobre una máquina remota que se sigan ejecutando cuando apagemos el ordenador desde el que nos estamos conectando. Así mismo hay programas interesantes como x2vnc, que permite (al estilo de x2x) manejar dos ordenadores de modo que al llegar el ratón al borde de la ventana "continúa" en la del otro PC.</para>

<para>La funcionalidad de ejecutar una aplicación interactiva y poder seguir manejándola desde otra máquina también existe para texto. Lo más habitual es lanzar la aplicación con screen. Si no lo hemos hecho, queda el recurso de linuxvnc, que se une a una sesión de terminal ya existente y permite manejarla vía VNC. Otra opción es conspy. Una alternativa a screen mucho más ligera pero que sólo aporta la funcionalidad de desvincular del terminal y no por ejemplo la de ejecutar varias aplicaciones es dtach</para>
</sect1>
<sect1><title>RDP. Escritorio remoto de Windows</title>

<para>Microsoft añadió soporte a su sistema operativo para poder ejecutar aplicaciones remotamente. En concreto lo implementó para Windows 2000 Server en el componente Windows Terminal Services, un sistema que permite al estilo Unix que varios usuarios estén conectados a la misma máquina. Evidemente para ello hay que pagar licencias, las de Windows 200x Server y la de Windows Terminal Services, esta última en función del número de clientes (una licencia por cliente que potencialemente se pueda conectar; fórmula menos ventajosa que licenciar por usuarios concurrentes y además propensa a abusos, pues la licencia cliente está incluida con algunas versiones de Windows, pero no con otros sistemas potencialmente clientes como GNU/Linux o Mac OSX). Como excepción, hay una licencia especial para usuarios que se conectan a través de Internet, que es la que se usa tienen en Hacienda para permitir que los usuarios de Linux y Windows hagan la declaración de la renta con el programa PADRE: la conexión es utilizando un cliente Cytrix (por Cytrix también se paga) pero a su vez Cytrix requiere Windows Terminal Services.</para>

<para>De todos modos por lo que es más conocido RDP es porque Windows XP Professional (no así Windows XP Home) incluye un servidor RDP limitado a una sola conexión y permitiendo una única sesión (es decir la máquina es monousario: o se usa en local o en remoto, pero no se puede tener a la vez una sesión local y otra remota). Lo mismo ocurre con las versiones más caras de Windows Vista (lo incluyen las versiones Enterprise y Vista Ultimate, pero no ninguna de las ediciones de Windows Home); también se incluye en el antiguo Windows Media Center, Windows 2003 Server y Tablet Edition 2005. Es el famoso escritorio remoto, para el que existe un cliente libre también para GNU/Linux, rdesktop. con una interfaz gráfica muy intuitiva, tsclient. Teóricamente Microsoft podría cobrar también licencias por clientes</para>

<para>RDP ofrece mejor rendimiento que VNC. Sigue por detrás de X-Window, pero recordemos que X-Window tiene un problema práctico con el round-trip, que RDP. Hasta RDP 6, novedad en Windows Vista (también disponible al parecer para XP SP2) tenía la limitación de VNC: sólo permitía manejar el escritorio entero en una ventana, no una ventana por aplicación. El soporte para ejecutar aplicaciones cada una en su ventana (SeamlessRDP) lo permite excepcionalmente rdesktop con versiones más viejas de RDP utilizando un componente que se ejecuta en el servidor.</para>

<para>Otra ventaja común con VNC es que permite desconectar la sesión e iniciarla desde otra máquina dejando todo como estaba.</para>

<para>Añade alguna innovación como poder utilizar remotamente más dispositivos que el ratón, teclado y pantalla: por ejemplo la tarjeta de sonido o la impresora. Esto en Unix ha sido también siempre posible, a través del demonio de sonido y de impresión, la diferencia aquí es que todo se hace con un solo producto y en RDP 6 se han ido añadiendo más posibilidades.</para>

<para>RDP se ejecuta también sobre una conexión TCP, por lo que al igual que VNC es fácil de enrutar usando openssh o stunnel. En las últimas versiones permite cifrado usando TLS, mientras que el sistema de cifrado de las versiones viejas basado en usar RC4 no es seguro.</para>

<para>En Linux existe también un servidor RDP que va sobre VNC o directamente X-Window: <ulink url="http://xrdp.sourceforge.net/">http://xrdp.sourceforge.net/</ulink>
</para>

<para>La versión propietaria del virtualizador VirtualBox incluye un servidor RDP para manejar remotamente el escritorio que se ejecuta dentro del virtualizador.</para></sect1>
<sect1><title>NX. Nueva tecnología de escritorio remoto.</title>

<para>NX ( http://en.wikipedia.org/wiki/NX_technology ) es una tecnología de escritorio remoto desarrollada por una empresa Italiana, NoMachine. NoMachine comercializa su implementación propietaria de esta tecnología. Los clientes son freeware y hay también un servidor freeware, NX Free Edition, para GNU/Linux y Solaris, mientras que el servidor para Windows y MacOSX es de pago. NX Free Edition está limitado respecto a la versión de pago: sólo permite dos sesiones por servidor</para>
<para>Lo más interesante es que Nomachine además publica el código fuente necesario para implementar esta tecnlogía bajo licencia GPL (lamentablemente sólo bajo GPL2): http://www.nomachine.com/documents/technology/building-components-3.x.php. El lado negativo es que no hay ninguna implementación libre que venga con las grandes distribuciones actuales, por lo que esta tecnología a pesar de ser muy interesante, tiene una presencia marginal en GNU/Linux.</para>

<para>NX se implementa sobre X-Window para acelerarlo sensiblemente y eliminar round-trips. Así, gracias al uso de caché o el utilizar formatos tipo PNG en lugar de bitmaps se logran ratios de compresión del orden de 10:1 a 100:1. Gracias a estas compresiones es utilizable un escritorio remoto incluso a través de un modem.</para>

<para>En una serie de artículos sobre NX publicados en Linux Journal, se muestra como el inicio de sesión en KDE la primera vez supone transferencias de 4,1MB, pero gracias a NX y su caché las siguientes veces se queda en tan solo 35Kb.</para>

<para>NX aplica a X-Window mejoras que ofrece RDP, como el poder desconectar la sesión y conectarse desde otra máquina con todo como estaba (lo logra haciendo que el servidor X se ejecute en la máquina remota, mediante el agente nxagent, a la que se conecta el cliente NX) o el permitir transferencias de ficheros o utilizar por las aplicaciones remotas nuestra impresora o tarjeta de sonido local.</para>
<para>Desde la versión 3.0, NX permite ejecutar aplicaciones en modo rootless, es decir, como aplicaciones normales en lugar de todas dentro de una ventana que actua de escritorio.</para>
<para>En realidad NX también se puede utilizar sobre RDP o VNC para acelerar también estos protocolos, pero los resultados que se obtienen son inferiores respecto a X-Window: como hemos comentado la tecnología de X-Window es superior a RDP, sólo que había problemas como los round-trips que en la práctica lo hacían poco utilizable sobre redes no locales.</para>

<para>Una limitación de NX utlizado sobre X-Window frente a VNC, es que no es posible iniciar un servidor NX sobre un servidor X ya arrancado, si se quiere usar remotamente hay que arrancarlo vía NX desde el principio.</para>
<sect2><title>Cómo funciona NX</title>
<para>En la implementación gratuita aunque privativa de NoMachine, NX Free Edition for Linux, hay paquetes nxserver, nxnode y nxclient. El servidor necesita los tres, mientras que el cliente necesita nxnode y nxclient; la mayoría de los programas están dentro del paquete nxnode; el motivo por el que para un servidor hace falta nxclient es simplemente porque este paquete incluye también las librerías de NX. Uno de los programas más importantes que incluye el paquete nxnode es precisamente el ejecutable nxnode, que un proxy que se ejecuta tanto en el lado local como en el remoto y que crea el túnel entre los dos lados. En el lado de la aplicación remota, nxnode ejecuta un agente que es el intermediario con la aplicación: para aplicaciones X-Window es nxagent, para RDP es nxdesktop y para VNC nxviewer. Nxagent funciona en la máquina remota como un servidor X-Window local. En principio las aplicaciones podrían funcionar sin necesidad de nxagent, utilizando el túnel de nxnode al estilo de un túnel SSH, pero nxagent es lo que permite eliminar los round-trips</para>

<para>Un tema que desconcierta a un nuevo usuario de NX, es que el servidor nxserver no es un demonio que tenga que lanzar el usuario y permanezca en ejecución a la espera que se conecten clientes. En realidad nxserver es un programa presente en la máquina de las aplicaciones remotas, que ejecuta el cliente (nxclient) vía SSH, bajo la cuenta de usuario nx: la idea es similar al servidor de sftp que viene con OpenSSH. Otro dato desconcertante es que a priori cualquiera puede ejecutar nxserver, pues se ejecuta accediendo con una clave SSH que la clave privada es conocida por todo el mundo, pues viene con el cliente NX. Esto no debería ser un problema de seguridad, pues nxserver autentica al cliente antes de hacer nada (que es invocar nxnode), pero es mejor si cambiamos la clave por otra, aunque entonces habrá que cambiarla también en todos los clientes. Por defecto nxserver para autenticar al cliente usa su usuario y contraseña en el sistema, pero se puede mantener una lista de usuarios y contraseñas propia para no tener que usar la del sistema. Con nxserver --help podemos ver las ordenes disponibles para entre otras cosas administrar usuarios.</para>

<para>Si usamos el cliente oficial, es muy recomendable en configure/advanced la opción "enable SSL encryption of all the traffic". Esta opción tiene un nombre confuso, porque realmente no se usa SSL: lo que hace es utilizar la conexión SSH para entubar todas las conexiones entre el nxnode local del cliente y el del servidor; estas conexiones irán cifradas, pero no con SSL sino con el protocolo de SSH, que es similar pero no es SSL. El interés de esta opción no está sólo en que se cifre sino en pasar los cortafuegos: sin ella habría que abrir varios puertos, que además van cambiando conforme se abren nuevas conexiones.</para>

<para>Algunas ideas para probar por qué no funciona la conexión:</para>
<orderedlist>
<listitem>
<para>probar primero con el cliente oficial, con la opción "enable SSL encryption of all the traffic". El problema más frecuente es de cortafuegos.</para>
</listitem>
<listitem>
<para>probar a conectar al servidor con <userinput>ssh -i /usr/NX/share/keys/server.id_dsa.key nx@ip_servidor</userinput> ; ejecutar <userinput>login</userinput> ; si no autentifica probar a añadir el usuario manualmente. Si no ha sido posible conectar, comprobar si es problema de SSH; podemos por ejemplo conectarnos a la máquina y ejecutar <userinput>su -- nx</userinput>; si al entrar en la cuenta del usuario "nx" no se abre una shell en la que podemos ejecutar login, es que no está correctamente instalado.</para>
</listitem>
</orderedlist>

<para>La información proporcionada como se ha dicho es para el caso "NX Free Edition", que es software privativo. En el caso del software GPL liberado por NoMachine, no existe por ejemplo nxnode sino nxproxy (tiene la misma función, utilizar un túnel que se podrá utilizar directamente o mejor mediante nxagent). </para>
</sect2>
<sect2><title>NX y software libre</title>

<para>El proyecto FreeNX (<ulink url="http://freenx.berlios.de/">http://freenx.berlios.de</ulink>) permite instalar un servidor NX (i.e. el lado de las aplicaciones remotas) utilizando software libre. FreeNX lo que hace es compilar el código GPL que ofrece NoMachine y añadirle scripts para lograr una solución funcional, pues el software GPL de no machine implementa la tecnología pero no por ejemplo las herramientas para administrar las conexiones. FreeNX no forma parte de Ubuntu, ni siquiera se incluye en el repositorio Universe (sólo se incluye el componente nxproxy, para usarse sólo en el lado cliente), pero hay un repositorio externo que se puede utilizar: <ulink url="https://help.ubuntu.com/community/FreeNX">https://help.ubuntu.com/community/FreeNX</ulink> . FreeNX tiene fallos de diseño que lo hacen difícil de mantener y por ello se está rediseñando. Es significativo que hace años Ubuntu incluyera FreeNX en su distribución y decidiera dejar de hacerlo, aunque el código actual ha mejorado. </para>

<para>FreeNX incluye el servidor, pero no un cliente. Como cliente es habitual utilizar el cliente freeware pero no libre de NoMachine; por ejemplo es el utilizado por la distribución para hacer thin clients ThinStation. La única alternativa libre "usable" es QtNX/Nxcl; NXCL es una librería, con una implementación de referencia en GTK+. El mismo autor de QtNX y NXCL está integrando la tecnología NX en más clientes y empaquetando versiones más recientes del código libre de NoMachine que el proporcionado por el propio proyecto FreeNX; es muy recomendable buscar en su blog sobre NX en <ulink url="http://blog.gwright.org.uk/articles/search?q=NX">http://blog.gwright.org.uk/articles/search?q=NX</ulink>. Otra implementación completa de NX (incluido el cliente) bajo GPL, obtenida tras comprar una licencia a NX de todo el código fuente de la versión 1.5 y liberarlo bajo GPL: <ulink url="http://code.2x.com/linuxterminalserver/downloads">http://code.2x.com/linuxterminalserver/downloads</ulink>. Sin embargo este código ha quedado anticuado, dado que NX ha ido incorporando novedades en sus versiones 2.x y 3.x.</para>

</sect2>

</sect1></chapter>

