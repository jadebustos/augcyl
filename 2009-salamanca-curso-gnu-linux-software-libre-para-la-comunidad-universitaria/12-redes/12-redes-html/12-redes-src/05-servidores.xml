<?xml version='1.0' encoding='utf-8'?>
<chapter><title>Servidores de red para empresas</title>
<sect1><title>DNS</title>
<para>Tener un servidor DNS público exige unos requisitos. Por lo pronto no basta con un servidor, como mínimo hay que tener dos, que deberían estar en localizaciones diferentes. La mayoría de las empresas optan por recurrir a una empresa que preste servicios de DNS, al menos para que les mantenga el servidor secundario, que periódicamente se actualiza del servidor maestro haciendo una transferencia de zona. Hay servicios DNS gratuitos como <ulink url="http://www.startssl.net/">http://www.startssl.net/</ulink></para>

<para>En nuestra red necesitamos un servidor DNS pero no para dar servicio a nuestro dominio, sino para que puedan resolver las direcciones DNS los usuarios de nuestra red, tanto las peticiones que van dirigidas a los servidores internos de la empresa con la que estamos conectados (dominio interno .acme), como los de la salida a Internet. Aclaremos que los servidores DNS de la empresa con la que estamos conectados no sólo sirven el dominio .acme sino también los de Internet, pues son los servidores DNS que usan todos los equipos de su red, por lo que podríamos configurar también nuestros equipos para que usen su DNS.</para>

<para>Es más práctico tener un servidor propio, que envíe las peticiones para resolver las direcciones de Internet al DNS de nuestro ISP y las de máquinas del dominio .acme a sus servidores DNS. La primera razón es porque no es lógico que cada vez que un usuario acceda a Internet usemos los servidores de la otra empresa: por privacidad, por buen uso de nuestras propias instalaciones y porque no deberíamos depender de si funciona bien la conexión con la otra empresa para poder usar Internet. Además si un día se añade conectividad con otra empresa más es evidente que habrá que consultar a cada empresa por su DNS.</para>

<para>Ejemplo de fichero de configuración:
<screen>// Ips que tienen acceso al servidor: sólo la red local
acl redinterna {
192.168.120.0/24;
};

options {
directory "/var/named";
forward first;
// Para resolver direcciones, usamos los servidores de nombres de
// nuestro ISP
forwarders {
80.58.0.33;
80.58.32.97;
};
// Esta línea es para usar la IP de la red local, en lugar de la IP de la
// interfaz de salida (la de la conexión con la red con la otra empresa o 
// la de Internet
query-source address 192.168.120.19 port *;
};

// Servidores raíz
zone "." IN {
type hint;
file "named.ca";
};

zone "localhost" IN {
type master;
file "localhost.zone";
allow-update { none; };
};

zone "127.in-addr.arpa" IN {
type master;
file "named.local";
allow-update { none; };
};

include "/etc/rndc.key";
// aquí ponemos los servidores DNS de la red de la otra empresa
zone "acme" {
type forward;
forwarders {
10.15.8.16;
};
forward only;
};

// Resolución inversa, también para la red de la otra empresa

zone "10.in-addr.arpa" {
type forward;
forwarders {
10.15.8.16
};
forward only;
};

// resolución inversa de nuestra zona
zone "15.168.192.in-addr.arpa" {
type master;
file "/var/named/192.168.120.rev";
};
</screen>
</para>
<sect2><title>DNS dinámico</title>

<para>Hay muchas web y sistemas para que un equipo con IP dinámica pueda dar de alta su IP en un DNS cada vez que se conecta o cambia. Básicamente lo que se hace es conectarse a un servidor, que analiza la IP de origen: esa será la IP que registrará, tras comprobar que el usuario aporta unas credenciales que le autorizan para cambiar su entrada DNS.</para>

<para>No hay un único sistema, por lo que hay unos programas que sirven para unos sitios y otros para otros, habiendo programas que soportan varios protocolos, como ez-ipupdate.</para>

<para>El paquete <ulink url="http://gnudip2.sourceforge.net/">http://gnudip2.sourceforge.net/</ulink> sirve para implementar nuestro propio servidor de DNS dinámico, junto con el cliente y la descripción del protocolo.</para>
</sect2></sect1>
<sect1><title>Servidor de correo</title>

<para>En general no es buena idea tener un servidor propio de correo, si se trata de una empresa pequeña con un ADSL. Hay muchas empresas que ofrecen redirecciones de correo (en unos casos limitadas a 100 o 200 redirecciones distintas, en otros ilimitadas) por un precio razonable. Es posible usar como destino de las redirecciones por ejemplo cuentas de gmail, que nos permiten usar la dirección que queramos para el correo saliente. Así mismo la propia Google ofrece paquetes para empresas tipo Gmail pero con dominio propio.</para>

<para>Si no obstante nos decidimos, el servidor de correo de un dominio se fija con un registro MX en el DNS; es posible tener varios registros para que si está caído un servidor, se acuda a otro. Las empresas que venden servicio DNS como EasyDNS suelen ofrecer también servidor de correo de respaldo, es decir, añadir uno de sus servidores de correo para que reciban el correo en el supuesto que nuestro servidor esté caído.</para>

<para>Usar como servidor de correo saliente uno propio en lugar de el del proveedor teóricamente permite más control como saber si un mensaje ha sido recibido por el servidor destino; así mismo permite que si la conexión a Internet esté caída el servidor siga aceptando mensajes y los envíe en cuanto se restablezca la conexión, aunque no todo el mundo ve esto como una ventaja. Un inconveniente es que las Ips asignadas a las líneas ADSL a veces están en listas negras para evitar correo basura, por lo que no son las ideales para situar un servidor de correo. En concreto, las Ips de ADSL de Telefónica están en SPAMHAUS PBL <ulink url="http://www.spamhaus.org/pbl">http://www.spamhaus.org/pbl</ulink>
<ulink url="http://www.spamhaus.org/pbl"> </ulink>
</para>
<para>a destacar que sitios como easydns.com bloquean el correo procedente de esas direcciones.</para>

<para>A priori una buena razón para montar un servidor de correo propio es evitar que los mensajes internos salgan a Internet. Sin embargo, recomendamos reemplazar los correos internos por mensajería instantánea utilizando un servidor con Jabber.</para>

<para>Si pese a todo insistimos en tener un servidor de correo propio, recomendamos usar PostFix como software y administrarlo a través de Webmin (<ulink url="http://www.webmin.com/">www.webmin.com</ulink>).</para>

<para>Tanto si instalamos nuestro propio servidor de correo como si usamos un proveedor, si tenemos un dominio propio es importante que usemos SPF, Sender Policy Framework (<ulink url="http://www.openspf.org/">http://www.openspf.org/</ulink>). Se trata de una medida antispam, consistente en añadir al DNS unos registros indicando qué servidores están autorizados para enviar correo en el que el remitente sea una dirección de nuestro dominio. </para>
<para>softlibre.net INT TXT "v=spf1 mx a:chemahome.softlibre.net include:gmail.com include:easydns.com -all"</para>
<para>En este caso hemos incluido con include las direcciones autorizadas para enviar con gmail.com, puesto que lo uso para enviar correos con @softlibre.net, y easydns.com, pues es quien se encarga de mis redirecciones. Además incluyo todo servidor de nombres del dominio (registros MX) y explíticamente a la máquina chemahome.softlibre.net. Observesé que para simplemente incluir todas las máquinas con registros de nombre A en el dominio bastaría con poner sólo "a". Al final con "-all" se indica que se deben rechazar todos los mensajes que no procedan de ninguno de los sitios indicados. Mientras estamos probando es mejor utilizar "~all", que en lugar de rechazar implica que el servidor añada una cabecera para que lo puedan detectar en los filtros de los programas de correo.</para>

<para>Es importante así mismo que pongamos una regla en el cortafuegos para prohibir conexiones al puerto 25 de otra máquina que el servidor de correo de la empresa (si es externo) o si es interno que sólo se pueda conectar al puerto 25 desde la IP del servidor de correo.</para>

<para>El servidor deberá aceptar correo destinado a su propio dominio y filtrar (o al menos clasificar) el correo que conforme a SPF es falso. Para enviar correo sólo deberá aceptar en el que el from sea el propio dominio y hacerlo autenticado.</para>

<para>Como información complementaria, este artículo explica como añadir a un servidor de correo un fitro ANTISPAM y un antivirus: http://www.howtoforge.com/amavisd_postfix_debian_ubuntu</para>
</sect1><sect1><title>Servidor Wiki</title>

<para>Un recurso muy útil para empresas es montar un wiki, una herramienta colaborativa en el que las personas pueden crear páginas de contenidos accesibles vía web, desde el propio navegador, de forma muy sencilla. Estas páginas las podrán modificar el resto de usuarios: en todo momento se podrá revisar el histórico de las páginas, ver quién ha hecho cada cambio... Un wiki además integra un buscador. En definitiva, es una herramienta muy útil para mantener información de uso interno entre un grupo de personas.</para>

<para>Hay distinto software para implementar un wiki. Aunque a la hora de editar editar las páginas de un wiki todas las soluciones son muy parecidas, lo cierto es que son distintos por lo que la gente cuando se acostumbra a uno le cuesta pasar a otro; así mismo no es trivial migrar de un wiki a otro. Vamos a mencionar cuatro soluciones:</para>
<orderedlist>
<listitem>
<para>Mediawiki (<ulink url="http://www.mediawiki.org/">www.mediawiki.org</ulink>). Licencia GPL. Es el software de la wikipedia, pero se usa en muchos otros proyectos, como Mozilla. Realmente no es la opción más flexible para empresas, por ejemplo de las propuestas analizadas es la más floja en el control de acceso para quien edita o ve las páginas; sólo resulta adecuada para un control básico, por ejemplo para que sólo puedan ver las páginas y editarlas los usuarios que están dados de alta en el wiki. Sus puntos fuertes son el atractivo visual de las páginas (además con versión imprimible) y que a muchos usuarios les resulta más familiar por usarse en muchos wikis y en la wikipedia. Otro punto fuerte es que es fácil de editar y muy flexible: se pueden editar fórmulas matemáticas y mediante GraphViz es sencillo crear diagramas. Incluye funcionalidades como página de discusión, posibilidad de notificar al usuario cuando la página cambia, control de páginas huérfanas, posibilidad de subir ficheros... Para instalar mediawiki hace falta Apache, PHP y MySQL.</para>
</listitem>
<listitem>
<para>Twiki (<ulink url="http://twiki.org/">http://twiki.org/</ulink>). Licencia GPL. Este software lo usan muchas empresas, como Michelin, Disney, SAP, Yahoo... Tiene plugins muy interesantes, como ActionTracker (para hacer TO-DO list, que pueden compartirse con otros usuarios), Calendar (calendario, con eventos resaltados) o un editor de gráficos en Java. Para instalar Twiki hace falta Apache y Perl (no hace falta un gestor de base de datos).</para>
</listitem>
<listitem>
<para>MoinMoin: (<ulink url="http://moinmoin.wikiwikiweb.de/">http://moinmoin.wikiwikiweb.de/</ulink>. Licencia GPL. Lo usan proyectos como Ubuntu, Debian, Apache, Hispalinux... Entre sus puntos fuertes que es fácil de instalar: está escrito en Python y no requiere más que un servidor web, por ejemplo Apache. No guarda las páginas en BB.DD.</para>
</listitem>
<listitem>
<para>TikiWiki: (http://tikiwiki.org/) . Licencia LGPL. Destaca por no ser sólo un wiki: también integra funciones de CMS (gestor de contenidos) y solución groupware, por lo que es muy interesante para empresas. Integra webmail, foros, blogs, encuestas, calendario, agenda de direcciones, hoja de cálculo... Para instalarlo requiere PHP y un gestor de BB.DD.: MySQL es el único sistema totalmente soportado, pero otros lo están parcialmente.</para>
</listitem>
</orderedlist>

</sect1>
<sect1><title>Servidor Jabber</title>
<para>XMPP es el protocolo de mensajería instantánea estandarizado por el IETF, el organismo que establece los protocolos de Internet. Es más conocido como Jabber, el nombre con el que se creó en 1998. </para>

<para>XMPP significa eXtensible Message Presence Protocol. Lo de "extensible" es muy importante: Jabber usa XML y gracias a ello se le han añadido todo tipo de extensiones, como invocar llamadas RPC entre dos clientes. Esto permite todo tipo de aplicaciones; recuerda la revolución que ha supuesto las aplicaciones web, sólo que aquí con más posibilidades: la comunicación no está limitada a cliente servidor sino entre dos clientes, que pueden variar su IP y ubicación. Además la comunicación es totalmente bidireccional, mientras que en la web es petición-respuesta: el navegador efectúa una petición y el servidor web responde, de modo que si es el servidor el que quiere notificar algo al navegador no puede salvo que se haga polling: el navegador envía una petición tipo "respondemé cuando tengas algo que decirme".</para>

<para>De igual modo que con el correo, una organización puede tener su propio servidor Jabber interno o elegir entre distintos proveedores. También como ocurre con los servidores de correo, las comunicaciones entre usuarios del mismo servidor no salen del servidor y por lo tanto de la red local de la organización, mientras que si se contacta con un usuario no local se localiza su servidor a partir de su dirección, que son iguales de las de correo, los servidores se comunican entre sí.</para>

<para>Esta es una gran diferencia respecto a soluciones propietarias como MSN Messenger, AOL o Yahoo, dónde hay un único servidor para todos los usuarios, lo que lo hace muy poco adecuado para empresas: incluso el correo interno pasa por Internet, por el mismo servidor que el de su competencia. Sería como si para tener correo electrónico una empresa sólo pudiera abrir cuentas en Hotmail o en Gmail y al escoger uno de estos dos sitios no pudiéramos enviar ni recibir mensajes del otro.</para>

<para>Otro problema de las soluciones propietarias es que se está en manos del proveedor incluso para elegir el programa de mensajería. En algunos casos se pueden usar distintos programas pero el proveedor tiene la sartén por el mango y puede en un momento dado no dejar que se conecte nadie con otro programa que el oficial. Es el caso de AOL, que durante un tiempo para evitar conexiones de otros clientes preguntaba al programa fragmentos de su propio código, que al estar bajo copyright no podían replicar los otros programas.</para>

<para>De hecho la propia Microsoft tiene una solución de mensajería instantánea para empresas que no usa el mismo protocolo que MSN sino en un software servidor; otro producto muy conocido de mensajería para empresas es Lotus SameTime. En realidad estas soluciones rivales de Jabber se basan en un protocolo que también está siendo estandarizado por el IETF, SIMPLE, pero a pesar de comenzar el proceso antes que con XMPP está más atrasado y hay aspectos básicos sin estandarizar que por lo tanto no son interoperables. De hecho mientras que hay miles de servidores que se comunican a través de Internet al estilo de los servidores de correo, de modo que puede contactar con cualquier usuario a través de su dirección, no ocurre así con los servidores de SIMPLE.</para>

<para>El paralelismo entre correo y Jabber es tan grande que el formato de direcciones es el mismo: en Google Gmail de hecho cada cuenta es una dirección de correo y de Jabber</para>

<para>Ventajas de tener un servidor de mensajería propio:</para>

<orderedlist>
<listitem>
<para>Los mensajes no salen de la organización. Mayor confidencialidad y seguridad. Mejor aprovechamiento de la conexión a Internet, pues es absurdo que para enviar un mensaje local éste salga a un servidor de Estados Unidos y vuelva.</para>
</listitem>
<listitem>
<para>Posibilidad de controlar el flujo de la información y con quien pueden contactar los usuarios. </para>
</listitem>
<listitem>
<para>Posibilidad de registrar las conversaciones. </para>
</listitem>
<listitem>
<para>Opción de añadir automáticamente contactos a todos los usuarios de un grupo.</para>
</listitem>
<listitem>
<para>Posibilidad de usar control de acceso corporativo: todo el mundo accede con su usuario y contraseña que usa para acceder al resto de aplicaciones de la empresa o mediante tarjeta de acceso.</para>
</listitem>
<listitem>
<para>Posibilidad de directorio de usuarios (usar uno en Internet hace más difícil las búsquedas y problema de no poder incluir información confidencial.</para>
</listitem>
<listitem>
<para>Posibilidad de enviar mensajes a todos los usuarios o poner mensajes del día</para>
</listitem>
<listitem>
<para>Posibilidad de añadir funcionalidad al servidor o de integrar otros servicios como VoIP.</para>
</listitem>
<listitem>
<para>Uso de un dominio propio. Mejor imagen corporativa. No se pierde disponibilidad si cae conexión a Internet o servidor del proveedor.</para>
</listitem>
</orderedlist>
<para>XMPP no es un protocolo que sólo sirva para mensajería, es realmente un protocolo que puede substituir en muchos usos a HTTP como protocolo para aplicaciones de Internet. Por ejemplo está estandarizado todo el tema de la autenticación, el mecanismo publish-subscribe, comandos ad-hoc, XML-RPC y SOAP, comunicación in-band (envío de datos arbitrarios usando el propio canal XMPP) y out-band con SOCKS5... Google ha aportado Jingle, que es para establecer sesiones entre dos clientes (por ejemplo para establecer una videoconferencia), usándose XMPP para la señalización y negociar el canal por el que irán los datos fuera de la conexión Jabber.</para><sect2><title>Qué servidor instalar</title>
<para>Hay varios servidores Jabber bajo licencia libre. Uno que viene con muchas distribuciones es jabberd, escrito en C. Uno de los más usados y fáciles de instalar (hay un vídeo de cómo instalar y empezar a usar este servidor en 180 segundos; en Debian y Ubuntu se instala con apt-get install ejabberd y ya está configurado para aceptar conexiones locales) es ejabberd (http://ejabberd.jabber.ru/). La única pega de ejabberd es que está escrito en Erlang, por lo que para quien no esté familiarizado con este lenguaje requiere cierto aprendizaje para escribir nuevos módulos. Otra opción es un servidor escrito en Java: OpenFire (anteriormente se llamaba WildFire): http://www.igniterealtime.org/projects/openfire/index.jsp.</para>
</sect2></sect1></chapter>

